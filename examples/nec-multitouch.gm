global SCREEN_WIDTH = 1920;
global SCREEN_HEIGHT = 1080;
global FPS = 10.0;
global MAX_MT_DISTANCE = 280;
global MT_POINTER_DISTANCE = 100;
global FRAME = Frame("Multitouch", 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, "#000000").toggle().render();
global SOCKET = Socket();
global TOUCH = Texture("images/cursor.png", 0, 0, 128, 128).update().center().middle();
global TOUCH_TOP = Texture("images/cursor_green.png", 0, 0, 128, 128).update().center().middle();
global TOUCH_BOTTOM = Texture("images/cursor_red.png", 0, 0, 128, 128).update().center().middle();
global TEXT = Text("Bitte den Bildschirm nicht mit den Fingern ber√ºhren.", Font("fonts/DejaVuSans-Bold.ttf", 40), SCREEN_WIDTH/2, SCREEN_HEIGHT/2);

global FINGERTOUCH_DETECTED = false;
global MT_OBJECT = null;

global GetMTPoint = function(i) {  return FRAME.getMultitouchPoint(i).scale(Vector(SCREEN_WIDTH,SCREEN_HEIGHT));  };

global GetMTObjectPointer = function(o) {
    pointer = Vector(o.pointTop);
    pointer.subtract(o.pointBottom);
    pointer.normalize();
    pointer.scale(Vector(MT_POINTER_DISTANCE,MT_POINTER_DISTANCE,MT_POINTER_DISTANCE));
    pointer.add(o.pointTop);
    return pointer;
};

global GetMTObject = function() {
    // get total touch points
    mtCount = FRAME.getMultitouchCount();
    if(mtCount < 3) { return null; }

    // biggest distance - to classify object
    distanceMax = 0.0;
    maxA = -1;
    maxB = -1;

    // points for direction
    pointTop = -1;
    pointBottom = -1;
    pointDistSumMax = 0.0;

    // merge points that are very close


    // find rotation and type of object
    for(a=0; a<mtCount; a+=1) {
        isValid = true;
        if(isValid) {
            pd = 0.0;
            for(b=0; b<mtCount; b+=1) {
                if(a==b) { continue; }
                d = GetMTPoint(a).distance(GetMTPoint(b));
                pd += d;
                if(d > distanceMax) { distanceMax = d; maxA = a; maxB = b; }
            }
            if(pd > pointDistSumMax) {
                pointDistSumMax = pd;
                pointTop = a;
            }
        }
    }
    if(pointTop == maxA) { pointBottom = maxB; } else { pointBottom = maxA; }

    // create result
    r = Object();
    r.pointTop = GetMTPoint(pointTop);
    r.pointBottom = GetMTPoint(pointBottom);
    r.objectSize = distanceMax;
    r.pointTop = GetMTObjectPointer(r);
    return r;
};

global RenderPoints = function() {
    local mtCount = FRAME.getMultitouchCount();
    for(i=0; i<mtCount; i+=1) {
        TOUCH.position = GetMTPoint(i);
        TOUCH.render();
    }
};

global RenderMTObject = function(o) {
    TOUCH_TOP.position = o.pointTop;   TOUCH_TOP.render();
    TOUCH_BOTTOM.position = o.pointBottom;   TOUCH_BOTTOM.render();
};

global SocketSendChange = function(str) {
    global SOCKET_SEND_PREV;
    if(str != SOCKET_SEND_PREV) {
        log(str);
        SOCKET.send(str);
        SOCKET_SEND_PREV = str;
    }
};

global DelayNoDetectionThread = function() {
    while(true) {
        global MT_OBJECT;
        global FINGERTOUCH_DETECTED;
        if(MT_OBJECT == null || FINGERTOUCH_DETECTED) {
            sleep(0.5);
            if(MT_OBJECT != null && !FINGERTOUCH_DETECTED) { continue; }
            if(FINGERTOUCH_DETECTED) {
                SocketSendChange("invalid");
            } else {
                SocketSendChange("none");
            }
        }
        yield();
    }
};

if(!SOCKET.openUDP("127.0.0.1", 8060)) { fatal("ERROR WHILE OPENING SOCKET!"); }
thread(DelayNoDetectionThread);
while(true) {
    FRAME.clear();
    FINGERTOUCH_DETECTED = false;
    MT_OBJECT = GetMTObject();
    if(FRAME.getMultitouchCount() == 5) { FINGERTOUCH_DETECTED = true; }
    if(MT_OBJECT) {
        if(MT_OBJECT.objectSize > 205.0) { FINGERTOUCH_DETECTED = true; }
        RenderPoints();
        RenderMTObject(MT_OBJECT);
        pointer = GetMTObjectPointer(MT_OBJECT);
        send = ""+MT_OBJECT.pointTop.x.Int()+","+MT_OBJECT.pointTop.y.Int()+","+MT_OBJECT.objectSize.Int();
        if(!FINGERTOUCH_DETECTED) { SocketSendChange(send); }
    } else {
        RenderPoints();
        //if(!FINGERTOUCH_DETECTED) { SocketSendChange("-1,-1,-1"); }
    }
    if(FINGERTOUCH_DETECTED) { TEXT.center().middle().render(); }
    FRAME.flip();
    pause(1.0/FPS);
    yield();
}
