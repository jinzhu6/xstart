global USE_MOUTH_DETECTION = 0;
global USE_EYE_DETECTION = 0;
global DETECTION_MIN_SIZE = 100;
global DETECTION_MAX_FACES = 10;

/********************************************************************************************************************
/ DetectFace
/********************************************************************************************************************/
global FaceDetector = Object("face_detector");
FaceDetector.DETECTOR_FACE = Detector("haar/haarcascade_frontalface_alt.xml");
FaceDetector.DETECTOR_EYES = Detector("haar/haarcascade_eye.xml");
FaceDetector.DETECTOR_EYES_ALT = Detector("haar/haarcascade_mcs_eyepair_small.xml");
FaceDetector.DETECTOR_MOUTH_ALT = Detector("haar/haarcascade_mcs_mouth.xml");
FaceDetector.DETECTOR_MOUTH = Detector("haar/haarcascade_smile.xml");
FaceDetector.result = Array("faces");
FaceDetector.bitmap = null;
FaceDetector.maxFaces = DETECTION_MAX_FACES;
FaceDetector.minFaceSize = DETECTION_MIN_SIZE;
FaceDetector.detectFeatures = 1;
FaceDetector.run = function(bitmap) {
	local num = this.DETECTOR_FACE.detect(bitmap, this.minFaceSize);
	if(num <= 0) { return null; }
	
	this.result = Array("faces");
	this.bitmap = bitmap;
	
	for(i=0; i<num; i+=1) {
		if(i == this.maxFaces) { break; }
		
		// build result
		face = Object("face_"+i);
		
		// get detected face rect
		local rect = this.DETECTOR_FACE.getFinding(i);
		local rectWidth  = rect.right  - rect.left;
		local rectHeight = rect.bottom - rect.top;
		
		if(this.detectFeatures) {
			// default mouth detection area
			local mouthArea = Rect();
			mouthArea.left   = rect.left   + rectWidth  * 0.18;  // 0.2
			mouthArea.right  = rect.right  - rectWidth  * 0.18;  // 0.2
			mouthArea.top    = rect.top    + rectHeight * 0.65;  // 0.67
			mouthArea.bottom = rect.bottom - rectHeight * 0.01;  // 0.1
			
			// default mouth rect
			local rectMouth = Rect();
			rectMouth.left   = rect.left + rectWidth * 0.22;  // 0.28
			rectMouth.right  = rect.right - rectWidth * 0.22;  // 0.28
			rectMouth.top    = rect.top + rectHeight * 0.625;  // was 0.69
			rectMouth.bottom = rectMouth.top + rectHeight * 0.28;  // was 0.25
			
			if(USE_MOUTH_DETECTION) {
				// get mouth detection bitmap
				mouthAreaBitmap = bitmap.cut(mouthArea.left, mouthArea.top, mouthArea.right - mouthArea.left, mouthArea.bottom - mouthArea.top);
				mouthAspect = mouthAreaBitmap.getHeight() / mouthAreaBitmap.getWidth();
				mouthScale  = mouthAreaBitmap.getWidth() / 200.0;
				mouthAreaBitmap.resize(mouthAreaBitmap.getWidth() * (1.0/mouthScale), mouthAreaBitmap.getHeight() * (1.0/mouthScale), false);
				
				// detect mouth (normal)
				local foundAMouth = false;
				if(this.DETECTOR_MOUTH.detect(mouthAreaBitmap, 30)) {
					mouthFound = this.DETECTOR_MOUTH.getFinding(0);
					if(mouthFound) {
						//log("WARNING: Found normal mouth.");
						foundAMouth = true;
						rectMouth.top    = mouthFound.top    * mouthScale  + mouthArea.top - rectHeight * 0.02;
						rectMouth.bottom = mouthFound.bottom * mouthScale  + mouthArea.top;
					}
				}
				// detect mouth (alternative)
				if(!foundAMouth) {
					this.DETECTOR_MOUTH_ALT.detect(mouthAreaBitmap, 50);
					mouthFound = this.DETECTOR_MOUTH_ALT.getFinding(0);
					if(mouthFound) {
						//log("WARNING: Found alternative mouth.");
						foundAMouth = true;
						rectMouth.top    = mouthFound.top    * mouthScale  + mouthArea.top;
						rectMouth.bottom = mouthFound.bottom * mouthScale  + mouthArea.top;
					}
				}
				if(!foundAMouth) { log("WARNING: No mouth found! Using default!"); }
			}
			
			// default eyes detection area
			local eyesArea = Rect();
			eyesArea.left   = rect.left    + rectWidth   * 0.0;
			eyesArea.right  = rect.right   - rectWidth   * 0.0;
			eyesArea.top    = rect.top     + rectHeight  * 0.22;
			eyesArea.bottom = rect.top     + rectHeight  * 0.58;
			
			// default for right eye
			local rectEyeRight = Rect();
			rectEyeRight.left = rect.left + rectWidth * 0.17;
			rectEyeRight.right = rectEyeRight.left + rectWidth * 0.25;
			rectEyeRight.top = rect.top + rectHeight * 0.34;
			rectEyeRight.bottom = rectEyeRight.top + rectHeight * 0.16;
			
			// default for left eye
			local rectEyeLeft = Rect();
			rectEyeLeft.left = rect.left + rectWidth * (1.0-0.17-0.25);
			rectEyeLeft.right = rectEyeLeft.left + rectWidth * 0.25;
			rectEyeLeft.top = rect.top + rectHeight * 0.34;
			rectEyeLeft.bottom = rectEyeLeft.top + rectHeight * 0.16;
			
			if(USE_EYE_DETECTION) {
				// get eyes detection bitmap
				eyesAreaBitmap = bitmap.cut(eyesArea.left, eyesArea.top, eyesArea.right - eyesArea.left, eyesArea.bottom - eyesArea.top);
				eyesAspect = eyesAreaBitmap.getHeight() / eyesAreaBitmap.getWidth();
				eyesScale  = eyesAreaBitmap.getWidth() / 200.0;
				eyesAreaBitmap.resize( eyesAreaBitmap.getWidth() * (1.0/eyesScale), eyesAreaBitmap.getHeight() * (1.0/eyesScale), false);
				
				// detect eyes (pair)
				local foundEyes = false;
				if(this.DETECTOR_EYES.detect(eyesAreaBitmap, 25)) {
					eyesFound = this.DETECTOR_EYES.getFinding(0);
					if(eyesFound) {
						log("WARNING: Found normal eyes.");
						foundEyes = true;
						rectEyeRight.top     = eyesFound.top     * eyesScale  + eyesArea.top + rectHeight   * 0.02;
						rectEyeRight.bottom  = eyesFound.bottom  * eyesScale  + eyesArea.top - rectHeight   * 0.02;
						rectEyeLeft.top      = eyesFound.top     * eyesScale  + eyesArea.top + rectHeight   * 0.02;
						rectEyeLeft.bottom   = eyesFound.bottom  * eyesScale  + eyesArea.top - rectHeight   * 0.02;
					}
				}
				// detect eyes (single)
				if(!foundEyes) {
					this.DETECTOR_EYES_ALT.detect(eyesAreaBitmap, 20);
					eyesFound = this.DETECTOR_EYES_ALT.getFinding(0);
					if(eyesFound) {
						foundEyes = true;
						log("WARNING: Found alternate eyes.");
						rectEyeRight.top     = eyesFound.top     * eyesScale  + eyesArea.top;
						rectEyeRight.bottom  = eyesFound.bottom  * eyesScale  + eyesArea.top;
						rectEyeLeft.top      = eyesFound.top     * eyesScale  + eyesArea.top;
						rectEyeLeft.bottom   = eyesFound.bottom  * eyesScale  + eyesArea.top;
					}
				}
				if(!foundEyes) { log("WARNING: Eyes not found! Using default!"); }
				
				// try to detect an eye to adjust the height
				/*eyesAreaBitmap = bitmap.cut(eyesArea.left, eyesArea.top, eyesArea.right - eyesArea.left, eyesArea.bottom - eyesArea.top);
				this.DETECTOR_EYES.detect(eyesAreaBitmap, minSize * 0.05);
				local foundEye = this.DETECTOR_EYES.getFinding(0);
				if(!foundEye) { log("WARNING: No eyes found! Using default!"); }
				if(foundEye && USE_EYE_DETECTION) {
		//			bitmap.cut(foundEye.left, foundEye.top, foundEye.bottom - foundEye.top, foundEye.right - foundEye.left).save("eye.png");
					rectEyeRight.top     = foundEye.top     + eyesArea.top;
					rectEyeRight.bottom  = foundEye.bottom  + eyesArea.top;
					rectEyeLeft.top      = foundEye.top     + eyesArea.top;
					rectEyeLeft.bottom   = foundEye.bottom  + eyesArea.top;
				}*/
			}
		}
		
		// adjust face
		rect.left -= rectWidth * 0.25;
		rect.right += rectWidth * 0.25;
		rect.top -= rectHeight * 0.4;
		rect.bottom += rectHeight * 0.3;
		
		// store result in result object
		face.rect = rect;
		
		if(this.detectFeatures) {
			face.mouthArea = mouthArea;
			face.mouth = rectMouth;
			face.eyesArea = eyesArea;
			face.leftEye = rectEyeLeft;
			face.rightEye = rectEyeRight;
		}
		this.result.add(face);
	}
	
	return this.result;
};
FaceDetector.getResult = function(index) {
	if(this.result.length() <= index){ return null; }
	return this.result.get(index);
};
FaceDetector.getFaceBitmap = function(index) {
	if(this.result.length() <= index){ return false; }
	local face = this.result.get(index);
	local result = this.bitmap.cut(face.rect.left, face.rect.top, face.rect.right - face.rect.left, face.rect.bottom - face.rect.top);
	result.swapRB();
	return result;
};
FaceDetector.getMouthBitmap = function(index) {
	local face = this.result.get(index);
	local result = this.bitmap.cut(face.mouth.left, face.mouth.top, face.mouth.right - face.mouth.left, face.mouth.bottom - face.mouth.top);
	return result;
};
FaceDetector.getLeftEyeBitmap = function(index) {
	local face = this.result.get(index);
	local result = this.bitmap.cut(face.leftEye.left, face.leftEye.top, face.leftEye.right - face.leftEye.left, face.leftEye.bottom - face.leftEye.top);
	return result;
};
FaceDetector.getRightEyeBitmap = function(index) {
	local face = this.result.get(index);
	local result = this.bitmap.cut(face.rightEye.left, face.rightEye.top, face.rightEye.right - face.rightEye.left, face.rightEye.bottom - face.rightEye.top);
	return result;
};
