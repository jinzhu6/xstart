global BLINK_MODE_VISIBLE = 0;
global BLINK_MODE_GREY = 1;
global BLINK_MODE_INVERT = 2;
global BLINK_MODE_BLUR = 3;
global BLINK_MODE_GLOW = 4;
global BLINK_MODE_SLIGHT = 5;
global BLINK_MODE_SCALE = 6;

global BLINK_ELEMENT = null;
global BLINK_COUNT = 0;
global BLINK_ISBLINK = false;
global BLINK_MODE_SHADER = false;

global BLINK_SHADER_GREY = null;
global BLINK_SHADER_BLUR = null;
global BLINK_SHADER_INVERT = null;
global BLINK_SHADER_GLOW = null;
global BLINK_SHADER_SLIGHT = null;

global BlinkSwitch = function(element, state, mode) {
	if(mode == BLINK_MODE_VISIBLE) {
		if(state) { element.visible = false; }
		else { element.visible = true; }
	}
	if(mode == BLINK_MODE_SCALE) {
		if(state) { element.scale = 0.95; }
		else { element.scale = 1.0; }
	}
	if(mode == BLINK_MODE_GREY || mode == BLINK_MODE_INVERT ||mode == BLINK_MODE_BLUR || mode == BLINK_MODE_GLOW || mode == BLINK_MODE_SLIGHT)
	{
		if(state) { element.useShader = 1; }
		else { element.useShader = 0; }
	}
	return !state;
};
global Blink = function(element, count, delay, mode) {
	global BLINK_SHADER_GREY;
	global BLINK_SHADER_BLUR;
	global BLINK_SHADER_INVERT;
	global BLINK_SHADER_GLOW;
	global BLINK_SHADER_SLIGHT;

	if(BLINK_SHADER_GREY == null)   { BLINK_SHADER_GREY = Shader("lib/data/normal.vs", "lib/data/grey.fs"); }
	if(BLINK_SHADER_BLUR == null)   { BLINK_SHADER_BLUR = Shader("lib/data/normal.vs", "lib/data/blur.fs"); }
	if(BLINK_SHADER_INVERT == null) { BLINK_SHADER_INVERT = Shader("lib/data/normal.vs", "lib/data/invert.fs"); }
	if(BLINK_SHADER_GLOW == null)   { BLINK_SHADER_GLOW = Shader("lib/data/normal.vs", "lib/data/glow.fs"); }
	if(BLINK_SHADER_SLIGHT == null) { BLINK_SHADER_SLIGHT = Shader("lib/data/normal.vs", "lib/data/slight.fs"); }

	if(mode == BLINK_MODE_GREY) { element.shader = BLINK_SHADER_GREY; }
	if(mode == BLINK_MODE_BLUR) { element.shader = BLINK_SHADER_BLUR; }
	if(mode == BLINK_MODE_INVERT) { element.shader = BLINK_SHADER_INVERT; }
	if(mode == BLINK_MODE_GLOW) { element.shader = BLINK_SHADER_GLOW; }
	if(mode == BLINK_MODE_SLIGHT) { element.shader = BLINK_SHADER_SLIGHT; }

	thread(ButtonBlinkThread, element, count, delay, mode);
};
global ButtonBlinkThread = function(element, count, delay, mode) {
	count = count * 2;
	local state = true;
	while(count || count == -1) {
		state = BlinkSwitch(element, state, mode);
		if(count != -1) { count -= 1; }
		sleep(delay);
	}
};
