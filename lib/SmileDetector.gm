#include "lib/FaceDetector.gm"

global DETECTOR_SMILE = Detector("haar/smiled_01.xml");
global SMILE_DEBUG = true;
global SMILE_NUM = 0;
global SMILE_MAX = 10;
global SMILE_POWER_NEEDED = 4;
global SMILE_POWER = 0;
global SMILE_MOUTH_RESIZE = 80;  // higher values create more false positive

global SmileDetect = function(bmp) {
	global SMILE_NUM;
	global SMILE_POWER;
	
	// detect faces on camera; we are only interested in the first face found
	local faces = FaceDetector.run(bmp);
	if(faces) {
		// get mouth bitmap and resize it
		local bmpMouth = FaceDetector.getMouthBitmap(0);
		bmpMouth.resize(SMILE_MOUTH_RESIZE, SMILE_MOUTH_RESIZE * bmpMouth.getHeight().Float() / bmpMouth.getWidth().Float(), true);
		
		// detect smile
		if(DETECTOR_SMILE.detect(bmpMouth,  10)) {
			log("Smile detected ...");
			SMILE_POWER += 1;
			if(SMILE_NUM >= SMILE_MAX) { SMILE_NUM = 0; }
			
			if(SMILE_DEBUG) {
				if(SMILE_POWER > SMILE_POWER_NEEDED) {
					// output face with feature detection results
					local face = FaceDetector.result.get(0);
					local bmpFace = FaceDetector.getFaceBitmap(0);
					local rcSmile = DETECTOR_SMILE.getFinding(0);
					local bmpSmileRect = Bitmap().create(4,4).clear("#ffffffA0").resize(rcSmile.right-rcSmile.left, rcSmile.bottom-rcSmile.top, false);
					local smileX = face.mouth.left - face.rect.left;
					local smileY = face.mouth.top - face.rect.top;
					bmpFace.paste(bmpSmileRect, smileX, smileY);
					bmpFace.save("smile/smile" + SMILE_NUM + ".png");
					//rcSmile = DETECTOR_SMILE.getFinding(0);
					//bmpSmile = bmpMouth.cut(rcSmile.left, rcSmile.top, rcSmile.right - rcSmile.left, rcSmile.bottom - rcSmile.top);
					//bmpSmile.swapRB().save("smile/smile" + SMILE_NUM + ".png");
					SMILE_NUM += 1;
					SMILE_POWER = 0;
				}
			}
			else {
				if(SMILE_POWER > SMILE_POWER_NEEDED) {
					FaceDetector.getFaceBitmap(0).save("smile/smile" + SMILE_NUM + ".png");
					SMILE_NUM += 1;
					SMILE_POWER = 0;
				}
			}
			return true;
		} else {
			SMILE_POWER = 0;
		}
	}
	return null;
};

global SmileGetFile = function(i) {
	fname = "smile/smile" + i + ".png";
	if(File().exists(fname)) { return fname; }
	return null;
};

global SmileReset = function() {
	global SMILE_NUM = 0;
	log("Resetting smiles ...");
	for(n = 0; n < SMILE_MAX; n += 1) { File().delete("smile/smile"+n+".png"); }
};
