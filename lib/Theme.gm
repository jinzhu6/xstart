#include "lib/Blink.gm"

global Theme = function(id) {
	global theme = Object(id);
	theme.fonts = Map("fonts");
	theme.bgImage = Texture("lib/data/bg.png");
	theme.bgColor = "#ffffff";
	theme.bgColor2 = "#000000";
	theme.fgColor = "#000000";
	theme.buttonText = "#333333";
	theme.buttonColor1 = "#ffffff";
	theme.buttonColor2 = "#a0a0ff";
	theme.strokeColor = "#606060";
	theme.strokeWidth = 2;
	theme.roundness = 6;


	/********************************************************************************************************************
	/ getFont, setFont
	/********************************************************************************************************************/
	theme.getFont = function(name) {
		return this.fonts.get(name);
	};
	theme.setFont = function(name, file, size) {
		this.fonts.set(name, Font(file, size)) ;
	};


	/********************************************************************************************************************
	/ Rectangle
	/********************************************************************************************************************/
	theme.Rectangle = function(x, y, w, h, color, callback) {
		if(!color) { color = this.bgColor; }

		local node = Canvas(null, x, y, w, h, "#ffffff00");
		node.clear();

		node.newPath();
		node.roundedRectangle(this.strokeWidth, this.strokeWidth, w- this.strokeWidth * 2, h - this.strokeWidth *2, this.roundness);
		node.closePath();

		node.setSolid(color);
		node.fill();

		node.setSolid(this.strokeColor);
		node.stroke(this.strokeWidth);
		node.onMouseUp = callback;

		return node;
	};


	/********************************************************************************************************************
	/ VSlider
	/********************************************************************************************************************/
	theme.VSlider = function(x, y, w, h, color, callback) {
		if(!color) { color = this.bgColor; }

        // create bar
		local node = Canvas(null, x-w/2, y, w*2, h, "#ffffff00");
		node.clear();

		//node.newPath();
		//node.roundedRectangle(this.strokeWidth+w*0.5*0.5, this.strokeWidth, w*0.5 - this.strokeWidth * 2, h - this.strokeWidth *2, this.roundness);
		//node.closePath();
		//node.setSolid(color);
		//node.fill();

		//node.setSolid(this.strokeColor);
		//node.stroke(this.strokeWidth);
		//node.onMouseUp = callback;

        // create handle
        local nodeHandle = Canvas(null, 0, h-w*0.5, w*2, w, "#ffffff00");
        nodeHandle.clear();

		nodeHandle.newPath();
		nodeHandle.roundedRectangle(this.strokeWidth, this.strokeWidth, w*2 - this.strokeWidth * 2, w - this.strokeWidth *2, this.roundness);
		nodeHandle.closePath();

		nodeHandle.setSolid(color);
		nodeHandle.fill();

		nodeHandle.setSolid(this.strokeColor);
		nodeHandle.stroke(this.strokeWidth);
		//nodeHandle.onMouseUp = callback;

        node["handle"] = nodeHandle;
        node["callback_slider"] = callback;

        node.onMouseMove = function(e) {
            e.sender["handle"].y = e.y - e.sender["handle"].height*0.5 - e.sender.y;
            e.sender.value = (e.y - e.sender.y) / e.sender.height;
            if(e.sender.callback_slider) { e.sender.callback_slider(e, e.sender.value); }
        };
        node.setSlider = function(v) {
            this["handle"].y = (this.height * v) - this["handle"].height*0.5;
//            if(node.callback) { node.callback(this, this.sender.value); }
        };

		return node;
	};


	/********************************************************************************************************************
	/ MakeButton
	/********************************************************************************************************************/
	theme.MakeButton = function(text, w, h, color2) {
		local button = Canvas(null, 0, 0, w, h, "#ffffff00");

		button.clear();
		button.newPath();
		button.roundedRectangle(this.strokeWidth, this.strokeWidth, w- this.strokeWidth * 2, h - this.strokeWidth *2, this.roundness);
		button.closePath();
		button.setLinear2(color2, color2, 0.0, 1.0);
		button.fill();
		if(this.strokeWidth) {
			button.setSolid(this.strokeColor);
			button.stroke(this.strokeWidth); }

		local textPos = this.getFont("button").measure(text);
		textPos.x = w * 0.5 - textPos.x * 0.5;
		textPos.y = h * 0.5 - textPos.y * 0.5;

		button.drawText(this.getFont("button"), text, textPos.x, textPos.y, this.buttonText);

		return button;
	};




	/********************************************************************************************************************
	/ MakeButtonSmall
	/********************************************************************************************************************/
	theme.MakeButtonSmall = function(text, w, h, color2) {
		local button = Canvas(null, 0, 0, w, h, "#ffffff00");

		button.clear();
		button.newPath();
		button.roundedRectangle(this.strokeWidth, this.strokeWidth, w- this.strokeWidth * 2, h - this.strokeWidth *2, this.roundness);
		button.closePath();
		button.setLinear2(this.buttonColor1, color2, 0.0, 1.0);
		button.fill();
		if(this.strokeWidth) {
			button.setSolid(this.strokeColor);
			button.stroke(this.strokeWidth); }

		local textPos = this.getFont("button_small").measure(text);
		textPos.x = w * 0.5 - textPos.x * 0.5;
		textPos.y = h * 0.5 - textPos.y * 0.5;

		button.drawText(this.getFont("button_small"), text, textPos.x, textPos.y, this.buttonText);

		return button;
	};


	/********************************************************************************************************************
	/ Button
	/********************************************************************************************************************/
	theme.Button = function(text, x, y, w, h, color2, callback) {
        if(!color2) { color2 = this.buttonColor2; }
		local button = this.MakeButton(text, w, h, color2);
		button.callback = callback;
		button.x = x;
		button.y = y;
		button.textsym = text;

		button.onMouseDown = function(evt) {
			//Blink(evt.sender, 1, 0.5, BLINK_MODE_INVERT);
		};
		button.onMouseMove = function(evt) {
			//Blink(evt.sender, 1, 0.3, BLINK_MODE_GREY);
			//Blink(evt.sender, 1, 0.7, BLINK_MODE_SCALE);
		};
		button.onMouseUp = function(evt) {
			//Blink(evt.sender, 1, 0.3, BLINK_MODE_INVERT);
			//Blink(evt.sender, 1, 0.7, BLINK_MODE_SCALE);
			if(evt.sender.callback) { return evt.sender.callback(evt); }
			return false;
		};
		return button;
	};


	/********************************************************************************************************************
	/ Button
	/********************************************************************************************************************/
	theme.ButtonSmall = function(text, x, y, w, h, color2, callback) {
		local button = this.MakeButtonSmall(text, w, h, color2);
		button.callback = callback;
		button.x = x;
		button.y = y;
		button.textsym = text;

		button.onMouseDown = function(evt) {
			//Blink(evt.sender, 1, 0.5, BLINK_MODE_INVERT);
		};
		button.onMouseMove = function(evt) {
			//Blink(evt.sender, 1, 0.3, BLINK_MODE_GREY);
			//Blink(evt.sender, 1, 0.7, BLINK_MODE_SCALE);
		};
		button.onMouseUp = function(evt) {
			//Blink(evt.sender, 1, 0.3, BLINK_MODE_INVERT);
			Blink(evt.sender, 1, 0.7, BLINK_MODE_SCALE);
			if(evt.sender.callback) { return evt.sender.callback(evt); }
			return false;
		};
		return button;
	};


	/********************************************************************************************************************
	/ ImageButton
	/********************************************************************************************************************/
	theme.ImageButton = function(image, text, x, y, w, h, callback) {
/*		local button = Canvas(image, x, y, w, h, "#ffffff00");
		button.callback = callback;
		button.clear();

		button.newPath();
		button.roundedRectangle(this.strokeWidth, this.strokeWidth, w- this.strokeWidth * 2, h - this.strokeWidth *2, this.roundness);
		button.closePath();

		button.setSolid(this.bgColor);
		button.fill();

		button.setSolid(this.strokeColor);
		button.stroke(this.strokeWidth);

		button.pivot.x = w * 0.5;
		button.pivot.y = h * 0.5;
		button.x += w * 0.5;
		button.y += h * 0.5;*/

		local button = Texture(image, x, y, w, h, "#ffffff");

		button.onMouseUp = callback;

		button["text"] = Text(text, this.getFont("button"), 0, 0, this.buttonText).update().center().middle();

		/*button.onMouseDown = function(evt) {
			evt.sender.scale = 1.1;
			evt.sender["text"].scale = 1.1;
		};
		button.onMouseUp = function(evt) {
			evt.sender.scale = 1.0;
			evt.sender["text"].scale = 1.0;
			if(evt.sender.callback) { return evt.sender.callback(evt); }
			return false;
		};*/
		return button;
	};


	/********************************************************************************************************************
	/ Text
	/********************************************************************************************************************/
	theme.Text = function(text, x, y, style, color) {
		if(!style) { style = "default"; }
		if(!color) { color = this.fgColor; }
		local el = Text(text, this.getFont(style), x, y, color);
		//el.textsym = text;
		return el;
	};


	/********************************************************************************************************************
	/ Image
	/********************************************************************************************************************/
	theme.Image = function(image, x, y, w, h, callback) {
		local el;
		if(w || h) { el = Texture(image, x, y, w, h); }
		else { el = Texture(image, x, y); }
		el.onMouseUp = callback;
		return el;
	};


	theme.setFont("default",  "lib/data/default.ttf", 30);
	theme.setFont("big", "lib/data/defaultb.ttf", 36);
	theme.setFont("caption", "lib/data/defaultb.ttf", 32);
	theme.setFont("button", "lib/data/defaultb.ttf", 42);
	theme.setFont("button_small", "lib/data/defaultb.ttf", 22);
	theme.setFont("message", "lib/data/defaultb.ttf", 96);

	return theme;
};
