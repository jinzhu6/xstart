#include "lib/Theme.gm"

//---------------------------------------------------------------------------------------------------
// App
//---------------------------------------------------------------------------------------------------
global App = function(title, x, y, width, height, fullscreen, theme) {
	if(!title) { title = "xstart"; }
	if(x == null) { x = 0; }
	if(y == null) { y = 0; }
	if(!width) { width = 640; }
	if(!height) { height = 480; }

	local app = Object("App");

	app.frame = Frame(title, x, y, width, height, "#ff00ff").showCursor(false);
	if(!fullscreen) { app.frame.toggle(); app.frame.showCursor(true); }
	app.frame.render();

    if(!theme) { theme = Theme("default"); }

	app.useFramebuffers = false;
	app.states = Map("states");
	app.fonts = Map("fonts");
	app.width = width;
	app.height = height;
	app.prev = null;
	app.active = null;
	app.stampedTime = time();
	app.messageTimeout = 0.0;
	app.fps = 0;
	app.isInitialized = false;
	app.theme = theme;

	app.x = x;
	app.y = y;
	app.width = width;
	app.height = height;

	//app.frame.onKeyDown = function(evt) { log(""+ascii(evt.key)); APP.frame.flip(); };
	//app.frame.onMouseUp = function(evt) { APP.setTimer(0.0); };


	//---------------------------------------------------------------------------------------------------
	// State
	//---------------------------------------------------------------------------------------------------
	app.State = function(name) {
        if(this.states[name]) { return this.states[name]; }

		log("Creating state '"+name+"'.");
		local state;
		if(this.useFramebuffers) {
			state = Framebuffer(null, 0, 0, this.width, this.height);
			state.pivot.x = this.width / 2;
			state.pivot.y = this.height / 2;
			state.x = this.width / 2;
			state.y = this.height / 2;
		} else {
			state = NodeEx();
		}
		state.name = name;
		state.init = function(app) {
			this["title"] = app.theme.Text(0, 0, ""+app.frame.id + " - " + this.name);
		};
		state.enter = function(app) {};
		state.run = function(app) {};
		state.exit = function(app) {};
		this.addState(state);
		return state;
	};


	/********************************************************************************************************************
	/ setTimer, getTimer
	/********************************************************************************************************************/
	app.setTimer = function(t) {
		this.stampedTime = time() - t;
	};
	app.getTimer = function() {
		local t = time() - this.stampedTime;
		if(t > 1000) { t = 0.0; } // hack to fix internal overflow
		return t;
	};


	/********************************************************************************************************************
	/ getFont, setFont
	/********************************************************************************************************************/
	app.getFont = function(name) {
		return this.fonts.get(name);
	};
	app.setFont = function(name, file, size) {
		this.fonts.set(name, Font(file, size)) ;
	};


	/********************************************************************************************************************
	/ showMessage
	/********************************************************************************************************************/
	app.showMessage = function(message, ms, color, outlineColor, useBox, xoffset, yoffset) {
		this.frame.root["message"] = Text(message, this.theme.getFont("message"), this.width/2, this.height/2, outlineColor);
		this.frame.root["message"].outline = 4;
		this.frame.root["message"].outlineColor = color;
		//CenterXY(this.frame.root["message"]);
		this.frame.root["message"].x += xoffset;
		this.frame.root["message"].y += yoffset;
		this.frame.root["message"].update().center().middle();
		this.messageTimeout = ms;

		if(useBox) {
			local boxSpacing = 30;
			local boxBorderWidth = 4;
			local boxBorderColor = outlineColor;
			local boxColor = color;
			this.frame.root["message_box"] = Canvas(null, this.width/2, this.height/2, this.frame.root["message"].width + boxSpacing * 2, this.frame.root["message"].height + boxSpacing * 2, "#ffffff00");
			this.frame.root["message_box"].clear();
			this.frame.root["message_box"].newPath();
			this.frame.root["message_box"].roundedRectangle(boxBorderWidth, boxBorderWidth, this.frame.root["message_box"].width - boxBorderWidth * 2, this.frame.root["message_box"].height - boxBorderWidth * 2, this.theme.roundness);
			this.frame.root["message_box"].closePath();
			this.frame.root["message_box"].setSolid(boxColor);
			this.frame.root["message_box"].fill();
			this.frame.root["message_box"].setSolid(boxBorderColor);
			this.frame.root["message_box"].stroke(boxBorderWidth);
			//CenterXY(this.frame.root["message_box"]);
			this.frame.root["message_box"].update().center().middle();
			this.frame.root["message_box"].x += xoffset;
			this.frame.root["message_box"].y += yoffset;
			this.frame.root["message"] = this.frame.root["message"];
		}
	};
	app.showMessageSimple = function(message, ms, xoffset, yoffset) {
		this.showMessage(message, ms, this.theme.fgColor, this.theme.bgColor, true, xoffset, yoffset);
	};


	/********************************************************************************************************************
	/ addState
	/********************************************************************************************************************/
	app.addState = function(state) {
		local name = state.name;
		this.states.set(name, state);
		this.frame.root[name] = state;
		this.frame.root[name].visible = false;
		//if(state.init) { state.init(this); }
		if(!this.active) { this.active = state; this.frame.root[name].visible = true; }
	};


	/********************************************************************************************************************
	/ getActiveState
	/********************************************************************************************************************/
	app.getActiveState = function() {
		return this.active;
	};


	/********************************************************************************************************************
	/ changeState
	/********************************************************************************************************************/
	app.changeState = function(name, noblend) {
		this.setTimer(0);

		this.prev = this.active;

		log("[App] Changing state to '"+name+"'.");

		if(noblend) {
			if(this.active) {
				if(this.active.exit) { this.active.exit(this,this.active); }
				this.active.visible = false;
			}
			this.active = this.states[name];
			this.states[name].visible = true;
			this.frame.root[this.active.name] = this.frame.root[this.active.name];
			this.setTimer(0);
			if(this.active.enter) { this.active.enter(this,this.active); }
			log("[App] State '"+name+"' ready.");
			return;
		}

		//if(this.active == this.states[name]) {return;}

		//this.frame.root["message"] = null;
		//this.frame.root["message_box"] = null;

		this.states[name].visible = true;
		this.active.visible = true;

		if(this.useFramebuffers) {
			if(this.active && this.states[name]) {
				this.states[name].z -= 1.0;
				//for(n = 0.0; n < 1.0; n += (2.0 / this.fps)) {
				local n = 0.0;
				while(n <= 0.99) {
					if(n > 0.98) { n = 1.0; }

					this.states[name].opacity = n;
					this.states[name].scale= n * 0.3 + 0.7;
					//this.active.scale = 1.0 - this.states[name].scale;
					this.active.opacity = 1.0 - n;

					this.frame.select();
					if(this.theme) {
						this.frame.clear(this.theme.bgColor);
						if(this.theme.bgImage) { this.theme.bgImage.render(); }
					} else {
						this.frame.clear("#000000");
					}
					this.states[name].render();
					this.active.render();
					this.frame.flip();

					pause(1.0 / 60.0);
					n += (1.0 - n) * 0.5;
				}
				//this.states[name].scale = 1.0;
				this.states[name].z += 1.0;
			}
		}

		//this.states[name].enabled = true;
		//this.active.enabled = true;

		if(this.active) {
			if(this.active.exit) { this.active.exit(this,this.active); }
			this.frame.root[this.active.name].visible = false;
			this.active = null;
		}
		if(this.states.get(name)) {
			this.active = this.states.get(name);
			this.frame.root[this.active.name].visible = true;
			this.frame.root[this.active.name] = this.frame.root[this.active.name];
			if(this.active.enter) { this.active.enter(this,this.active); }
			this.setTimer(0);
		}
		this.active.opacity = 1.0;
		this.active.scale = 1.0;

		log("[App] State '"+name+"' ready.");
	};


	/********************************************************************************************************************
	/ init
	/********************************************************************************************************************/
	app.init = function() {
		this.isInitialized = true;
		foreach(s in this.states) {
            s = this.states.get(s);
			if(s.init) {
				log("[App] Initializing '"+s.name+"'.");
				s.init(this,s);
			}
		}
		if(this.active) { this.changeState(this.active.name, true); }
	};


	/********************************************************************************************************************
	/ render
	/********************************************************************************************************************/
	app.render = function() {
		this.frame.select();
		if(this.theme) {
			this.frame.clear(this.theme.bgColor);
			if(this.theme.bgImage) { this.theme.bgImage.width = this.frame.width; this.theme.bgImage.height = this.frame.height; this.theme.bgImage.render(); }
		} else {
			this.frame.clear("#000000");
		}

		//this.frame.render(false);
		this.active.render();
		if(this.frame.root["message_box"]) { this.frame.root["message_box"].render(); }
		if(this.frame.root["message"]) { this.frame.root["message"].render(); }
		this.frame.flip();
	};


	/********************************************************************************************************************
	/ run
	/********************************************************************************************************************/
	app.run = function(once) {
		if(!this.isInitialized) { this.init(); }
		while(true) {
			if(this.fps) { pause(1.0 / this.fps); }
			yield();

			if(!this.active) { fatal("No active state to run!"); continue; }
			if(this.active.run) { this.active.run(this,this.active); }

			this.render();

			if(this.frame.root["message"] != null) {
				this.messageTimeout -= 1.0 / this.fps;
				if(this.messageTimeout <= 0.0) {
					this.frame.root["message"] = null;
					this.frame.root["message_box"] = null;
				}
			}
			if(once) { break; }
		}
	};

	return app;
};
