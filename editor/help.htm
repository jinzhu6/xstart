<html><head><style>body { position:relative; font-family: Verdana; font-size: 12px; background-color: #333333; color:#f0f0f0; }
h1 { margin:6px; font-size:12px; text-decoration: underline; }
h2 { font-size:20px; padding:4px; color: #f0f0f0; text-shadow: 2px 2px 2px black; background-color:rgba(40,90,255,0.4); }
h3 { margin:6px; color:#ffffff }
pre { margin:6px; margin-left:30px; font-weight:bold;  }
i { color: #9999f0; }
a { color: #d0e0ff; text-decoration: none; }
hr { margin-right:5px; width:0px }
p.caption { font-weight:bold; margin:15px; margin-left:30px; margin-bottom:3px; padding-top:5px; }
p.help { margin:15px; margin-left:30px; }
p.code { font-family:monospace; margin:6px; margin-left:30px; font-weight:bold }
div.example { margin-top:4px; margin-bottom:1px; margin-right:0px; margin-left:30px; padding:0px; border: 1px; border-style: dashed; border-color:#999999; background-color: #222222; }
div.function { margin-top:4px; margin-bottom:1px; margin-right:0px; margin-left:30px; padding:0px; border: 1px; border-style: dashed; border-color:#999999; background-color: #222244; }
div.member { margin-top:4px; margin-bottom:1px; margin-right:0px; margin-left:30px; padding:0px; border: 1px; border-style: dashed; border-color:#999999; background-color: #223344; }
div.index { position:fixed; height: 100%; min-height: 100%; overflow-y:auto; top:0px; left:0px; width:190px; margin-top:4px; margin-bottom:1px; margin-right:30px; margin-left:10px; padding:0px; font-size:9px; color:#ffffff; }
div.content { position: relative; left:215px; margin-right:255px; }
</style></head><body><div class='index'><h1>xstart Script API 0.3.0</h1><h3>&gt; <a href='#GLOBAL'> GLOBAL</a></h3><h3>&gt; <a href='#Object'> Object</a></h3><h3>&gt; <a href='#Array'> Array</a></h3><h3>&gt; <a href='#List'> List</a></h3><h3>&gt; <a href='#Map'> Map</a></h3><h3>&gt; <a href='#Data'> Data</a></h3><h3>&gt; <a href='#Vector'> Vector</a></h3><h3>&gt; <a href='#Color'> Color</a></h3><h3>&gt; <a href='#Rect'> Rect</a></h3><h3>&gt; <a href='#Date'> Date</a></h3><h3>&gt; <a href='#File'> File</a></h3><h3>&gt; <a href='#Midi'> Midi</a></h3><h3>&gt; <a href='#XMLDocument'> XMLDocument</a></h3><h3>&gt; <a href='#XMLNode'> XMLNode</a></h3><h3>&gt; <a href='#Bitmap'> Bitmap</a></h3><h3>&gt; <a href='#Font'> Font</a></h3><h3>&gt; <a href='#Frame'> Frame</a></h3><h3>&gt; <a href='#Event'> Event</a></h3><h3>&gt; <a href='#Handler'> Handler</a></h3><h3>&gt; <a href='#Node'> Node</a></h3><h3>&gt; <a href='#NodeEx'> NodeEx</a></h3><h3>&gt; <a href='#Texture'> Texture</a></h3><h3>&gt; <a href='#Canvas'> Canvas</a></h3><h3>&gt; <a href='#Text'> Text</a></h3><h3>&gt; <a href='#Shader'> Shader</a></h3><h3>&gt; <a href='#Framebuffer'> Framebuffer</a></h3><h3>&gt; <a href='#Recorder'> Recorder</a></h3><h3>&gt; <a href='#Detector'> Detector</a></h3><h3>&gt; <a href='#Socket'> Socket</a></h3><h3>&gt; <a href='#Listener'> Listener</a></h3><h3>&gt; <a href='#HttpServer'> HttpServer</a></h3><h3>&gt; <a href='#Serial'> Serial</a></h3><h3>&gt; <a href='#AudioDevice'> AudioDevice</a></h3><h3>&gt; <a href='#AudioDeviceInfo'> AudioDeviceInfo</a></h3><h3>&gt; <a href='#AudioFile'> AudioFile</a></h3><h3>&gt; <a href='#AudioFilter'> AudioFilter</a></h3><h3>&gt; <a href='#AudioPitch'> AudioPitch</a></h3><h3>&gt; <a href='#AudioDelay'> AudioDelay</a></h3><h3>&gt; <a href='#Dmx'> Dmx</a></h3><h3>&gt; <a href='#Video'> Video</a></h3><h3>&gt; <a href='#Camera'> Camera</a></h3></div><hr/><div class='content'><div class='class'><h2 id='GLOBAL'>GLOBAL</h2><p class='code'>GLOBAL </p><p class='help'>Global interface.</p><p class='caption'>Functions:</p><div class='function'><h3 id='GLOBAL.version'>version</h3><p class='code'> <i>string</i> version()</p><p class='help'>Returns the version string.</p></div><div class='function'><h3 id='GLOBAL.exit'>exit</h3><p class='code'>exit()</p><p class='help'>Terminates the program immediately.</p></div><div class='function'><h3 id='GLOBAL.throw'>throw</h3><p class='code'>throw()</p><p class='help'>Throws an exception.</p></div><div class='function'><h3 id='GLOBAL.ascii'>ascii</h3><p class='code'> <i>string</i> ascii(<i>int</i> ascii)</p><p class='help'>Returns the string character for the given ascii code.</p></div><div class='function'><h3 id='GLOBAL.system'>system</h3><p class='code'> <i>string</i> system(<i>string</i> command)</p><p class='help'>Executes a command and redirects output via pipe so you can catch the output of the command.</p></div><div class='function'><h3 id='GLOBAL.start'>start</h3><p class='code'> <i>string</i> start(<i>string</i> command)</p><p class='help'>Executes a command without waiting for it to finish, thus returning immediately.</p></div><div class='function'><h3 id='GLOBAL.random'>random</h3><p class='code'> <i>float</i> random( (optional) <i>float</i> (or) <i>int</i> max)</p><p class='help'>Returns a random number between 0 and 'max'. If 'max' is a floating point number, the result is a floating point number too, otherwise its an integer.</p></div><div class='function'><h3 id='GLOBAL.time'>time</h3><p class='code'> <i>float</i> time()</p><p class='help'>Gets the elapsed time since the program start in seconds.</p></div><div class='function'><h3 id='GLOBAL.print'>print</h3><p class='code'>print(<i>string</i>)</p><p class='help'>Outputs the string on the console, no newline is added.</p></div><div class='function'><h3 id='GLOBAL.println'>println</h3><p class='code'>println(<i>string</i>)</p><p class='help'>Outputs the string on the console, a newline is added.</p></div><div class='function'><h3 id='GLOBAL.log'>log</h3><p class='code'>log(<i>string</i> message)</p><p class='help'>Writes a log message to the console.</p></div><div class='function'><h3 id='GLOBAL.warning'>warning</h3><p class='code'>warning(<i>string</i> error)</p><p class='help'>Reports a warning on the console.</p></div><div class='function'><h3 id='GLOBAL.error'>error</h3><p class='code'>error(<i>string</i> error)</p><p class='help'>Reports a error on the console.</p></div><div class='function'><h3 id='GLOBAL.fatal'>fatal</h3><p class='code'>fatal(<i>string</i> error)</p><p class='help'>Reports a fatal error on the console and terminates the program immediately!</p></div><div class='function'><h3 id='GLOBAL.popup'>popup</h3><p class='code'>popup(<i>string</i> info)</p><p class='help'>Opens a message box with the given information.</p></div><div class='function'><h3 id='GLOBAL.ask'>ask</h3><p class='code'> <i>string</i> ask(<i>string</i> question)</p><p class='help'>Prompts the user for a line of input.</p></div><div class='function'><h3 id='GLOBAL.redirect'>redirect</h3><p class='code'>redirect(<i>string</i> file)</p><p class='help'>Redirects the console output to a file of the given name.</p></div><div class='function'><h3 id='GLOBAL.load'>load</h3><p class='code'> <i>string</i> get(<i>string</i> key)</p><p class='help'>Loads a config string.</p></div><div class='function'><h3 id='GLOBAL.save'>save</h3><p class='code'>save(<i>string</i> key, <i>string</i> value)</p><p class='help'>Saves a config string.</p></div><div class='function'><h3 id='GLOBAL.instance'>instance</h3><p class='code'><i>object</i> instance(<i>string</i> class)</p><p class='help'>Creates an instance from a class type name. Used for introspection.</p></div><div class='function'><h3 id='GLOBAL.pause'>pause</h3><p class='code'>pause( <i>float</i> s)</p><p class='help'>Pauses the execution for the given time in seconds.</p></div><div class='function'><h3 id='GLOBAL.eval'>eval</h3><p class='code'>eval(<i>string</i> code)</p><p class='help'>Execute given code.</p></div><div class='function'><h3 id='GLOBAL.callstack'>callstack</h3><p class='code'><i>string</i> callstack()</p><p class='help'>Returns the current callback as string.</p></div><div class='function'><h3 id='GLOBAL.debug'>debug</h3><p class='code'>debug(<i>int</i> level)</p><p class='help'>Enable/Disable console debug messages.</p></div><div class='function'><h3 id='GLOBAL.colors'>colors</h3><p class='code'>colors(<i>int</i> enable)</p><p class='help'>Enable/Disable console colors.</p></div><div class='function'><h3 id='GLOBAL.arg'>arg</h3><p class='code'><i>string</i> arg(<i>int</i> number)</p><p class='help'>Get command-line arguments.</p></div><div class='function'><h3 id='GLOBAL.sound'>sound</h3><p class='code'>sound(<i>string</i> file)</p><p class='help'>Plays a sound file. (This is a simple and inefficient way to play a sound file)</p></div><div class='function'><h3 id='GLOBAL.askFile'>askFile</h3><p class='code'><i>string</i> askFile()</p><p class='help'>Opens a dialog where the user can select a file.</p></div><div class='function'><h3 id='GLOBAL.monitor'>monitor</h3><p class='code'><a href='#Rect'>Rect</a> monitor(<i>int</i> index)</p><p class='help'>Gets the rectangle area of the given monitor in virtual screen space.</p></div></div><hr/><div class='class'><h2 id='Object'>Object</h2><p class='code'>Object((optional) <i>string</i> id)</p><p class='help'>Object base class. Like an object in JavaScript it has a user table for its members.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Object.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Object.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Array'>Array</h2><p class='code'>Array((optional) <i>string</i> id)</p><p class='help'>Dynamic array class for storing a linear array of objects, native types or a mix of that.</p><p class='caption'>Example:</p><div class='example'><pre>ar = Array();
ar.add("Das");
ar.add("ist");
ar.add(1);
obj = ar.add("Test");

print(obj+" is at index "+ar.find(obj)+"\n");

foreach(e in ar) {
	print(e + " ");
}
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Array.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Array.add'>add</h3><p class='code'><a href='#Object'>Object</a> add(<a href='#Object'>Object</a> object)</p><p class='help'>Adds an object to the end of the array. The added object is returned.</p></div><div class='function'><h3 id='Array.remove'>remove</h3><p class='code'><a href='#Array'>this</a> remove(<i>int</i> index)</p><p class='help'>Removes the element at the given index from the array.</p></div><div class='function'><h3 id='Array.find'>find</h3><p class='code'><i>int</i> find(<a href='#Object'>Object</a> object)</p><p class='help'>Finds the index of the given object, returns -1 if the object is not in the array.</p></div><div class='function'><h3 id='Array.length'>length</h3><p class='code'><i>int</i> length()</p><p class='help'>Returns the length of the array.</p></div><div class='function'><h3 id='Array.parse'>parse</h3><p class='code'><a href='#Array'>this</a> parse(<i>string</i> json)</p><p class='help'>EXPERIMENTAL, UNFINISHED. Parses a JSON representation to an object.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Array.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='List'>List</h2><p class='code'>List((optional) <i>string</i> id)</p><p class='help'>Double linked list for fast insertion and removal of script objects.</p><p class='caption'>Example:</p><div class='example'><pre>global l = List();

l.push(Object("a"));
l.push(Object("b"));
l.push(Object("c"));
l.pop();
l.push(Object("d"));
l.pop();

log(l.toString());
log("Count: "+l.count());^
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='List.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='List.count'>count</h3><p class='code'><i>int</i> count()</p><p class='help'>Counts number of items in the list.</p></div><div class='function'><h3 id='List.clear'>clear</h3><p class='code'><a href='#List'>this</a> clear()</p><p class='help'>Clears the list by removing all items from the list.</p></div><div class='function'><h3 id='List.first'>first</h3><p class='code'><a href='#Object'>Object</a> first()</p><p class='help'>Gets the first item from the list.</p></div><div class='function'><h3 id='List.last'>last</h3><p class='code'><a href='#Object'>Object</a> last()</p><p class='help'>Gets the last item from the list.</p></div><div class='function'><h3 id='List.fromIndex'>fromIndex</h3><p class='code'><a href='#Object'>Object</a> fromIndex(<i>int</i> index)</p><p class='help'>Gets the item at the given index position.</p></div><div class='function'><h3 id='List.index'>index</h3><p class='help'><b>Deprecated, use fromIndex() instead.</b></p></div><div class='function'><h3 id='List.pop'>pop</h3><p class='code'><a href='#List'>this</a> pop()</p><p class='help'>Removes the first item from list.</p></div><div class='function'><h3 id='List.popFirst'>popFirst</h3><p class='code'><a href='#List'>this</a> popFirst()</p><p class='help'>Removes the first item from list.</p></div><div class='function'><h3 id='List.popLast'>popLast</h3><p class='code'><a href='#List'>this</a> popLast()</p><p class='help'>Removes the last item from list.</p></div><div class='function'><h3 id='List.randomPop'>randomPop</h3><p class='code'><a href='#List'>this</a> randomPop(<a href='#Object'>Object</a> object)</p><p class='help'>Removes the given item from list.</p></div><div class='function'><h3 id='List.remove'>remove</h3><p class='code'><a href='#List'>this</a> remove(<a href='#Object'>Object</a> object)</p><p class='help'>Removes the given item from list.</p></div><div class='function'><h3 id='List.push'>push</h3><p class='code'><a href='#List'>this</a> push(<a href='#Object'>Object</a> object)</p><p class='help'>Pushes the given object at the end of the list.</p></div><div class='function'><h3 id='List.pushBack'>pushBack</h3><p class='code'><a href='#List'>this</a> pushBack(<a href='#Object'>Object</a> object)</p><p class='help'>Pushes the given object at the end of the list.</p></div><div class='function'><h3 id='List.pushFront'>pushFront</h3><p class='code'><a href='#List'>this</a> pushFront(<a href='#Object'>Object</a> object)</p><p class='help'>Pushes the given object at the start of the list.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='List.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Map'>Map</h2><p class='code'>Map((optional) <i>string</i> id)</p><p class='help'>Map class for mapping a list of values and/or object to strings indices. Supports foreach iteration, the order of the insertions/changes is preserved. For convenience the dot . and index <a href='#'></a> operators can be used to modify and add to the map.</p><p class='caption'>Example:</p><div class='example'><pre>m = Map();
m.set("das", "das!");
m.set("ist", "ist!");
m.set("ein", "ein!");
m.set("test", "Test!");
m.set("number", 1.23);
m.set("das", null);

foreach(e in m) {
	print(" " + m[e]);
}
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Map.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Map.get'>get</h3><p class='code'><a href='#Object'>Object</a> get(<i>string</i> key)</p><p class='help'>Gets the mapped object for the given key. If the key does not exist, the value null is returned.</p></div><div class='function'><h3 id='Map.set'>set</h3><p class='code'><a href='#Map'>this</a> set(<i>string</i> key, <i>object</i> value)</p><p class='help'>Sets the value for the key or creates a new key with the given value. If <i>value</i> is <i>null</i> the given <i>key</i> is removed.</p></div><div class='function'><h3 id='Map.length'>length</h3><p class='code'><i>int</i> length()</p><p class='help'>Returns the number of entries in the map.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Map.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Data'>Data</h2><p class='code'>Data((optional) <i>string</i> id)</p><p class='help'></p><p class='caption'>Functions:</p><div class='function'><h3 id='Data.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Data.loadRaw'>loadRaw</h3><p class='code'><a href='#Data'>this</a> loadRaw(<i>string</i> file)</p><p class='help'>Loads the given file into data memory as is.</p></div><div class='function'><h3 id='Data.saveRaw'>saveRaw</h3><p class='code'><a href='#Data'>this</a> saveRaw(<i>string</i> file)</p><p class='help'>Saves the data into a file as is.</p></div><div class='function'><h3 id='Data.appendRaw'>appendRaw</h3><p class='code'><a href='#Data'>this</a> appendRaw(<i>string</i> file)</p><p class='help'>Appends the data to an existing file as is.</p></div><div class='function'><h3 id='Data.peek'>peek</h3><p class='code'><i>int</i> peek(<i>int</i> addr)</p><p class='help'>Reads a single byte from the given address.</p></div><div class='function'><h3 id='Data.poke'>poke</h3><p class='code'><a href='#Data'>this</a> poke(<i>int</i> addr, <i>int</i> value)</p><p class='help'>Writes a single byte to the given address.</p></div><div class='function'><h3 id='Data.resize'>resize</h3><p class='code'><i>int</i> resize(<i>int</i> newsize)</p><p class='help'>Resizes the data array length.</p></div><div class='function'><h3 id='Data.copyFrom'>copyFrom</h3><p class='code'><a href='#Data'>this</a> copyFrom(<i>Data</i> source)</p><p class='help'>Makes a copy of the source data. Any old data in this object will be lost.</p></div><div class='function'><h3 id='Data.insert'>insert</h3><p class='code'><a href='#Data'>this</a> insert(<i>Data</i> source, <i>int</i> position)</p><p class='help'>Copies the source data to the given position. The data may be resized to fit the added content.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Data.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Data.size'><i>int</i> size</h3><p class='help'>(readonly) Size of data array.</p></div><div class='member'><h3 id='Data.loop'><i>bool</i> loop</h3><p class='help'>Set to true to wrap the read and write cursor when they reach the end of the stream.</p></div><div class='member'><h3 id='Data.readCursor'><i>int</i> readCursor</h3><p class='help'>Read cursor.</p></div><div class='member'><h3 id='Data.writeCursor'><i>int</i> writeCursor</h3><p class='help'>Write cursor.</p></div></div><hr/><div class='class'><h2 id='Vector'>Vector</h2><p class='code'>Vector((optional) <i>float</i> x, (optional) <i>float</i> y, (optional) <i>float</i> z)  or  (<a href='#Vector'>Vector</a> copy)</p><p class='help'>3D vector class.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Vector.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Vector.set'>set</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.length'>length</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.add'>add</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.subtract'>subtract</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.scale'>scale</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.divide'>divide</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.distance'>distance</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.normalize'>normalize</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.normal'>normal</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.radians2D'>radians2D</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.rotate2D'>rotate2D</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.cross2D'>cross2D</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Vector.dot2D'>dot2D</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Vector.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Vector.x'><i>float</i> x</h3><p class='help'></p></div><div class='member'><h3 id='Vector.y'><i>float</i> y</h3><p class='help'></p></div><div class='member'><h3 id='Vector.z'><i>float</i> z</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='Color'>Color</h2><p class='code'>Color((optional) <i>string</i> id)</p><p class='help'>Color class to help computatation and conversions. Individual values range from 0.0 to 1.0. YCbCr is full range.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Color.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Color.fromStringRGBA'>fromStringRGBA</h3><p class='code'><a href='#Color'>this</a> fromStringRGBA(<i>string</i> rgba)</p><p class='help'>Parse a color string and save the values in the members r,g,b,a and y,cb,cr as floats.</p></div><div class='function'><h3 id='Color.toStringRGBA'>toStringRGBA</h3><p class='code'><i>string</i> toStringRGBA()</p><p class='help'>Gets a string representation (#RRGGBBAA) of the stored r,g,b,a and a values.</p></div><div class='function'><h3 id='Color.updateYCbCrFromRGB'>updateYCbCrFromRGB</h3><p class='code'><a href='#Color'>this</a> updateYCbCr()</p><p class='help'>Updates the y,cb,cr values from the r,g,b values.</p></div><div class='function'><h3 id='Color.updateRGBFromYCbCr'>updateRGBFromYCbCr</h3><p class='code'><a href='#Color'>this</a> updateRGB()</p><p class='help'>Updates the r,g,b,a values from the y,cb,cr values.</p></div><div class='function'><h3 id='Color.updateHSVFromRGB'>updateHSVFromRGB</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Color.updateRGBFromHSV'>updateRGBFromHSV</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Color.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Color.r'><i>float</i> r</h3><p class='help'>Red.</p></div><div class='member'><h3 id='Color.g'><i>float</i> g</h3><p class='help'>Green.</p></div><div class='member'><h3 id='Color.b'><i>float</i> b</h3><p class='help'>Blue.</p></div><div class='member'><h3 id='Color.a'><i>float</i> a</h3><p class='help'>Alpha.</p></div><div class='member'><h3 id='Color.y'><i>float</i> y</h3><p class='help'>Luma.</p></div><div class='member'><h3 id='Color.cb'><i>float</i> cb</h3><p class='help'>Blue difference chroma.</p></div><div class='member'><h3 id='Color.cr'><i>float</i> cr</h3><p class='help'>Red difference chroma.</p></div><div class='member'><h3 id='Color.h'><i>float</i> h</h3><p class='help'>Hue.</p></div><div class='member'><h3 id='Color.s'><i>float</i> s</h3><p class='help'>Saturation.</p></div><div class='member'><h3 id='Color.v'><i>float</i> v</h3><p class='help'>Value.</p></div></div><hr/><div class='class'><h2 id='Rect'>Rect</h2><p class='code'>Rect((optional) <i>string</i> id)</p><p class='help'>Object base class. Like an object in JavaScript it has a user table for its members.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Rect.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Rect.enclose'>enclose</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Rect.set'>set</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Rect.hitTest'>hitTest</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Rect.getWidth'>getWidth</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Rect.getHeight'>getHeight</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Rect.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Rect.left'><i>float</i> left</h3><p class='help'></p></div><div class='member'><h3 id='Rect.top'><i>float</i> top</h3><p class='help'></p></div><div class='member'><h3 id='Rect.right'><i>float</i> right</h3><p class='help'></p></div><div class='member'><h3 id='Rect.bottom'><i>float</i> bottom</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='Date'>Date</h2><p class='code'>Date((optional) <i>string</i> id)</p><p class='help'>Date and time conversion.</p><p class='caption'>Example:</p><div class='example'><pre>d = Date().now();
print("\nNow is " + d.format("%d %B %Y - %H:%M:%S (UTC)") + "\n");
ts = d.getUnix();
print("The current unix timestamp is " + ts + "\n");
d.setUnix(ts);
print("Now is " + d.format("%d %B %Y - %H:%M:%S (UTC)") + "\n\n");

d = Date().today();
print("Today is " + d.format("%d %B %Y - %H:%M:%S (UTC)") + "\n");
ts = d.getUnix();
print("The current unix timestamp is " + ts + "\n");
d.setUnix(ts);
print("Today is " + d.format("%d %B %Y - %H:%M:%S (UTC)") + "\n\n");
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Date.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Date.now'>now</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.today'>today</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.isExpired'>isExpired</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.getUnix'>getUnix</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.setUnix'>setUnix</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.adjust'>adjust</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.format'>format</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.parse'>parse</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.toHijri'>toHijri</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Date.toGregorian'>toGregorian</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Date.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Date.year'><i>int</i> year</h3><p class='help'></p></div><div class='member'><h3 id='Date.month'><i>int</i> month</h3><p class='help'></p></div><div class='member'><h3 id='Date.day'><i>int</i> day</h3><p class='help'></p></div><div class='member'><h3 id='Date.hour'><i>int</i> hour</h3><p class='help'></p></div><div class='member'><h3 id='Date.minute'><i>int</i> minute</h3><p class='help'></p></div><div class='member'><h3 id='Date.second'><i>int</i> second</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='File'>File</h2><p class='code'>File((optional)<i>string</i> file, (optional)<i>string</i> mode="rb")</p><p class='help'>Opens a file for reading or writing.</p><p class='caption'>Example:</p><div class='example'><pre>// write a text to text.txt
File("test.txt","wb").write("Hello World!\n").close();

// read and print text
print(File("test.txt","rb").read());
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='File.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='File.open'>open</h3><p class='code'><a href='#File'>this</a> open(<i>string</i> fileName, <i>string</i> mode)</p><p class='help'>Opens a file in the given mode ("r" = read, "w" = write, "rb" = read binary, "wb" = write binary, "a" = append, "ab" = append binary).</p></div><div class='function'><h3 id='File.close'>close</h3><p class='code'>close()</p><p class='help'>Closes the file. This is also done by garbage collecting the object.</p></div><div class='function'><h3 id='File.write'>write</h3><p class='code'><a href='#File'>this</a> write(<i>string</i> data, (optional) <i>int</i> length)</p><p class='help'><b>Subject to change.</b> Write string to file.</p></div><div class='function'><h3 id='File.read'>read</h3><p class='code'><i>string</i> read( (optional) <i>int</i> length)</p><p class='help'><b>Subject to change.</b> Reads 'length' of bytes from file or the whole file if length is not specified.</p></div><div class='function'><h3 id='File.exists'>exists</h3><p class='code'><i>int</i> exists(<i>string</i> fileName)</p><p class='help'>Checks if a given file name exists. Returns zero on failure or non-zero if the file exists.</p></div><div class='function'><h3 id='File.delete'>delete</h3><p class='code'><i>bool</i> delete(<i>string</i> fileName)</p><p class='help'>Deletes the given file. Returns <i>false</i> only aif the file exists and can not be removed.</p></div><div class='function'><h3 id='File.seek'>seek</h3><p class='code'><a href='#File'>this</a> seek(<i>int</i> position)</p><p class='help'>Moves the file cursor to the given position. No error checking performed.</p></div><div class='function'><h3 id='File.tell'>tell</h3><p class='code'><i>int</i> tell()</p><p class='help'>Returns the current file cursor position.</p></div><div class='function'><h3 id='File.size'>size</h3><p class='code'><i>int</i> size()</p><p class='help'>Returns the file size in bytes.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='File.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='File.bytes'><i>int</i> bytes</h3><p class='help'>Number of bytes read by last read operation.</p></div></div><hr/><div class='class'><h2 id='Midi'>Midi</h2><p class='code'>Midi</p><p class='help'></p><p class='caption'>Functions:</p><div class='function'><h3 id='Midi.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Midi.load'>load</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Midi.getTrackCount'>getTrackCount</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Midi.getEventCount'>getEventCount</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Midi.getEvent'>getEvent</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Midi.joinTracks'>joinTracks</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Midi.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='XMLDocument'>XMLDocument</h2><p class='code'>XMLDocument((optional) <i>string</i> id)</p><p class='help'>XML document class.</p><p class='caption'>Functions:</p><div class='function'><h3 id='XMLDocument.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='XMLDocument.load'>load</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='XMLDocument.save'>save</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='XMLDocument.toXML'>toXML</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='XMLDocument.setRoot'>setRoot</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='XMLDocument.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='XMLDocument.root'><i>object</i> root</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='XMLNode'>XMLNode</h2><p class='code'>XMLNode((optional) <i>string</i> id)</p><p class='help'>XML node class.</p><p class='caption'>Functions:</p><div class='function'><h3 id='XMLNode.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='XMLNode.add'>add</h3><p class='code'><a href='#Object'>Object</a> add(<a href='#Object'>Object</a> object)</p><p class='help'>Adds an object to the end of the array. The added object is returned.</p></div><div class='function'><h3 id='XMLNode.remove'>remove</h3><p class='code'><a href='#XMLNode'>this</a> remove(<i>int</i> index)</p><p class='help'>Removes the element at the given index from the array.</p></div><div class='function'><h3 id='XMLNode.find'>find</h3><p class='code'><i>int</i> find(<a href='#Object'>Object</a> object)</p><p class='help'>Finds the index of the given object, returns -1 if the object is not in the array.</p></div><div class='function'><h3 id='XMLNode.length'>length</h3><p class='code'><i>int</i> length()</p><p class='help'>Returns the length of the array.</p></div><div class='function'><h3 id='XMLNode.parse'>parse</h3><p class='code'><a href='#XMLNode'>this</a> parse(<i>string</i> json)</p><p class='help'>EXPERIMENTAL, UNFINISHED. Parses a JSON representation to an object.</p></div><div class='function'><h3 id='XMLNode.getChild'>getChild</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='XMLNode.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='XMLNode.name'><i>string</i> name</h3><p class='help'></p></div><div class='member'><h3 id='XMLNode.content'><i>string</i> content</h3><p class='help'></p></div><div class='member'><h3 id='XMLNode.isCDATA'><i>int</i> isCDATA</h3><p class='help'></p></div><div class='member'><h3 id='XMLNode.attributes'><i>object</i> attributes</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='Bitmap'>Bitmap</h2><p class='code'>Bitmap(<i>string</i> imageFile)</p><p class='help'>The bitmap class can load, save, store and manipulate one bitmap image. This is NOT a scene node, consider using a <a href='#Texture'>Texture</a> to render a bitmap. Bitmaps can transfer from and to <a href='#Texture'>Texture</a>.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Bitmap.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Bitmap.create'>create</h3><p class='code'><a href='#Bitmap'>this</a> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>Creates a bitmap image or the given size.</p></div><div class='function'><h3 id='Bitmap.load'>load</h3><p class='code'><i>int</i> load(<i>string</i> file)</p><p class='help'>Loads the given image into the image bitmap. Width and height is taken from the image. If a different resolution is needed, the bitmap must be resized afterwards.</p></div><div class='function'><h3 id='Bitmap.save'>save</h3><p class='code'><i>int</i> save(<i>string</i> file)</p><p class='help'>Saves the bitmap as a PNG image.</p></div><div class='function'><h3 id='Bitmap.clear'>clear</h3><p class='code'><a href='#Bitmap'>this</a> clear(<i>string</i> color)</p><p class='help'>Clears the image with the given color.</p></div><div class='function'><h3 id='Bitmap.flipX'>flipX</h3><p class='code'><a href='#Bitmap'>this</a> flipX()</p><p class='help'>Flips the bitmap image horizontally.</p></div><div class='function'><h3 id='Bitmap.flipY'>flipY</h3><p class='code'><a href='#Bitmap'>this</a> flipY()</p><p class='help'>Flips the bitmap image vertically.</p></div><div class='function'><h3 id='Bitmap.swapRB'>swapRB</h3><p class='code'><a href='#Bitmap'>this</a> swapRB()</p><p class='help'>Swaps the red and blue components of all pixels in the bitmap. This might be useful for images captured by a camera, since captured images may have a BGRA format.</p></div><div class='function'><h3 id='Bitmap.resize'>resize</h3><p class='code'><a href='#Bitmap'>this</a> resize(<i>int</i> width, <i>int</i> height, <i>int</i> bilinear</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Bitmap.duplicate'>duplicate</h3><p class='code'><a href='#Bitmap'>Bitmap</a> duplicate()</p><p class='help'>Returns a duplicate of the whole bitmap as a new object.</p></div><div class='function'><h3 id='Bitmap.cut'>cut</h3><p class='code'><a href='#Bitmap'>Bitmap</a> cut(<i>int</i> x, <i>int</i> y, <i>int</i> width, <i>int</i> height)</p><p class='help'>Returns a copy of the given area.</p></div><div class='function'><h3 id='Bitmap.paste'>paste</h3><p class='code'>paste(<a href='#Bitmap'>Bitmap</a>, <i>int</i> x, <i>int</i> y</p><p class='help'>Paste a given bitmap on the given coordinates.</p></div><div class='function'><h3 id='Bitmap.softenEdge'>softenEdge</h3><p class='code'>softenEdge(<i>int</i> width)</p><p class='help'>Does a rectangular alpha-blending on the bitmap edges.</p></div><div class='function'><h3 id='Bitmap.multiplyMask'>multiplyMask</h3><p class='code'>multiply(<a href='#Bitmap'>Bitmap</a> mask, <i>float</i> offset, <i>float</i> scale)</p><p class='help'>Multiplies the bitmap with the given bitmap mask.</p></div><div class='function'><h3 id='Bitmap.saturateMask'>saturateMask</h3><p class='code'>saturateMask(<a href='#Bitmap'>Bitmap</a> mask, <i>float</i> offset, <i>float</i> scale)</p><p class='help'>Changes saturation based on the given mask.</p></div><div class='function'><h3 id='Bitmap.getWidth'>getWidth</h3><p class='code'><i>int</i> getWidth()</p><p class='help'>Gets the current width of the bitmap.</p></div><div class='function'><h3 id='Bitmap.getHeight'>getHeight</h3><p class='code'><i>int</i> getHeight()</p><p class='help'>Gets the current height of the bitmap.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Bitmap.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Font'>Font</h2><p class='code'>Font(<i>string</i> fontFile, (optional) <i>int</i> fontSize), (optional) <i>int</i> righToLeft</p><p class='help'>Creates a font object for rendering text.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Font.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Font.load'>load</h3><p class='code'><a href='#Font'>this</a> load(<i>string</i> fontFile, <i>int</i> fontSize)</p><p class='help'>Loads the font file with the given font size.</p></div><div class='function'><h3 id='Font.measure'>measure</h3><p class='code'><a href='#Vector'>Vector</a> measure(<i>string</i> text, (optional) <i>int</i> outlineWidth)</p><p class='help'>Measures the texture size of the text if rendered with this font. Only x and y of the <a href='#Vector'>Vector</a> object will be set.</p></div><div class='function'><h3 id='Font.drawText'>drawText</h3><p class='code'><i>int</i> drawText(<a href='#Texture'>Texture</a> texture, <i>string</i> text, <i>string</i> color, <i>int</i> x, <i>int</i> y), (optional) <i>int</i> outlineWidth, <i>string</i> outlineColor</p><p class='help'><b>Subject to change.</b> Draws a text directly in a given texture.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Font.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Font.rightToLeft'><i>int</i> rightToLeft</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='Frame'>Frame</h2><p class='code'>Frame(<i>string</i> id, <i>int</i> pos_x, <i>int</i> pos_y, <i>int</i> width, <i>int</i> height, (optional) <i>string</i> color)</p><p class='help'>Window frame for rendering output. The frame uses a scene-graph to draw its content, see <a href='#Frame.root'>root</a> member.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Frame.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Frame.close'>close</h3><p class='code'><a href='#Frame'>this</a> close()</p><p class='help'>Closes the window. Please note that any textures, shaders and other assets may be internally destroyed if no other window has a valid context on these.</p></div><div class='function'><h3 id='Frame.render'>render</h3><p class='code'><a href='#Frame'>this</a> render()</p><p class='help'>Immediately renders the frames scene graph.</p></div><div class='function'><h3 id='Frame.toggle'>toggle</h3><p class='code'><a href='#Frame'>this</a> toggle()</p><p class='help'>Toggles the frame from/to frameless mode.</p></div><div class='function'><h3 id='Frame.showCursor'>showCursor</h3><p class='code'><a href='#Frame'>this</a> showCursor(<i>int</i> show)</p><p class='help'>Shows or hides the cursor when its over the frame window.</p></div><div class='function'><h3 id='Frame.setDimensions'>setDimensions</h3><p class='code'><a href='#Frame'>this</a> setDimensions(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Experimental) Sets the virtual dimensions of the frame. If not set, the frames dimensions is used instead.</p></div><div class='function'><h3 id='Frame.flip'>flip</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.select'>select</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.clear'>clear</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.maximize'>maximize</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.minimize'>minimize</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.show'>show</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.activate'>activate</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.getMultitouchCount'>getMultitouchCount</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.getMultitouchPoint'>getMultitouchPoint</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Frame.onClose'>onClose</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Frame.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Frame.root'><a href='#Node'>Node</a> root</h3><p class='help'>Scene graph node, initially set to an empty Node object, see <a href='#Node'>Node</a>.</p></div><div class='member'><h3 id='Frame.width'><i>float</i> width</h3><p class='help'>(Experimental) Virtual frame width.</p></div><div class='member'><h3 id='Frame.height'><i>float</i> height</h3><p class='help'>(Experimental) Virtual frame height.</p></div><div class='member'><h3 id='Frame.mirrorX'><i>int</i> mirrorX</h3><p class='help'>(Experimental) Set to non-zero Mirror screen horizontal.</p></div><div class='member'><h3 id='Frame.mirrorY'><i>int</i> mirrorY</h3><p class='help'>(Experimental) Set to non-zero Mirror screen vertically.</p></div></div><hr/><div class='class'><h2 id='Event'>Event</h2><p class='code'>Event((optional) <i>string</i> id)</p><p class='help'>Event object that is received by all events as the first parameter. <a href='#Handler'>Handler</a> is the base class for all objects that can receive events. The <a href='#Event.id'>id</a> on this, is set to the event name.<br/><br/>Common events are: <b>Close, MouseMove, MouseDown, MouseUp, KeyDown, KeyUp</b>.<br/>These are received by setting these event handlers on the receiver object: <b>onClose, onMouseMove, onMouseDown, onMouseUp, onKeyDown, onKeyUp</b>. Mouse events are send to all elements under them, if an event handler returns true, the event is not send further down the scene-tree hierarchy - however, you should then avoid using sleep() or yield() in the event handler.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Event.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Event.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Event.sender'><a href='#Object'>Object</a> sender</h3><p class='help'>Origin of the event, this is set to the object on which the event was rised.</p></div><div class='member'><h3 id='Event.key'><i>int</i> key</h3><p class='help'>For keyboard events, this is set to the keycode.</p></div><div class='member'><h3 id='Event.button'><i>int</i> button</h3><p class='help'>For mouse events, this is set to the button.</p></div><div class='member'><h3 id='Event.x'><i>float</i> x</h3><p class='help'>For mouse move events, this is the mouse x-coordinate</p></div><div class='member'><h3 id='Event.y'><i>float</i> y</h3><p class='help'>For mouse move events, this is the mouse y-coordinate</p></div></div><hr/><div class='class'><h2 id='Handler'>Handler</h2><p class='code'>Handler((optional) <i>string</i> id)</p><p class='help'>MAY NOT BE OF USE IN SCRIPTS. Base class for all <a href='#Node'>Node</a> objects that receive events of type <a href='#Event'>Event</a>.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Handler.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Handler.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Node'>Node</h2><p class='code'>Node((optional) <i>string</i> id, (optional) <i>float</i> pos_x, (optional) <i>float</i> pos_y, (optional) <i>float</i> width, (optional) <i>float</i> height)</p><p class='help'>Empty scene node.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Node.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Node.update'>update</h3><p class='code'><a href='#Node'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Node.render'>render</h3><p class='code'><a href='#Node'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Node.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Node.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Node'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Node.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Node.left'>left</h3><p class='code'><a href='#Node'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Node.center'>center</h3><p class='code'><a href='#Node'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Node.right'>right</h3><p class='code'><a href='#Node'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Node.top'>top</h3><p class='code'><a href='#Node'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Node.middle'>middle</h3><p class='code'><a href='#Node'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Node.bottom'>bottom</h3><p class='code'><a href='#Node'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Node.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Node.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Node.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Node.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Node.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Node.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Node.center'>center</a> .</p></div><div class='member'><h3 id='Node.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Node.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Node.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Node.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Node.position'>position</a> .x</p></div><div class='member'><h3 id='Node.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Node.position'>position</a> .y</p></div><div class='member'><h3 id='Node.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Node.position'>position</a> .z</p></div><div class='member'><h3 id='Node.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Node.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Node.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Node.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Node.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Node.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Node.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Node.rotation'>rotation</a> .z</p></div></div><hr/><div class='class'><h2 id='NodeEx'>NodeEx</h2><p class='code'>NodeEx((optional) <i>string</i> id, (optional) <i>float</i> pos_x, (optional) <i>float</i> pos_y, (optional) <i>float</i> width, (optional) <i>float</i> height)</p><p class='help'>Generic extended scene node.</p><p class='caption'>Functions:</p><div class='function'><h3 id='NodeEx.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='NodeEx.update'>update</h3><p class='code'><a href='#NodeEx'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='NodeEx.render'>render</h3><p class='code'><a href='#NodeEx'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='NodeEx.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='NodeEx.setClipRegion'>setClipRegion</h3><p class='code'><a href='#NodeEx'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='NodeEx.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='NodeEx.left'>left</h3><p class='code'><a href='#NodeEx'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='NodeEx.center'>center</h3><p class='code'><a href='#NodeEx'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='NodeEx.right'>right</h3><p class='code'><a href='#NodeEx'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='NodeEx.top'>top</h3><p class='code'><a href='#NodeEx'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='NodeEx.middle'>middle</h3><p class='code'><a href='#NodeEx'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='NodeEx.bottom'>bottom</h3><p class='code'><a href='#NodeEx'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='NodeEx.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='NodeEx.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='NodeEx.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='NodeEx.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='NodeEx.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='NodeEx.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#NodeEx.center'>center</a> .</p></div><div class='member'><h3 id='NodeEx.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='NodeEx.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#NodeEx.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='NodeEx.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#NodeEx.position'>position</a> .x</p></div><div class='member'><h3 id='NodeEx.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#NodeEx.position'>position</a> .y</p></div><div class='member'><h3 id='NodeEx.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#NodeEx.position'>position</a> .z</p></div><div class='member'><h3 id='NodeEx.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#NodeEx.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='NodeEx.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#NodeEx.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='NodeEx.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#NodeEx.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='NodeEx.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#NodeEx.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='NodeEx.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='NodeEx.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='NodeEx.color'><a href='#Color'>Color</a> color</h3><p class='help'><b>Experimental.</b> The color used while rendering.</p></div></div><hr/><div class='class'><h2 id='Texture'>Texture</h2><p class='code'>Texture((optional) <i>string</i> file, (optional) <i>float</i> pos_x, (optional) <i>float</i> pos_y, (optional) <i>float</i> width, (optional) <i>float</i> height), (optional) <i>string</i> clearColor</p><p class='help'>Texture node class.</p><p class='caption'>Example:</p><div class='example'><pre>frame = Frame("main", 50, 50, 640, 480, "#ffffff").toggle().showCursor(true);
frame.root["texture"] = Texture("images/earth-bg.jpg", 0, 0, 640, 480);

while(true) { frame.render(); yield(); }
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Texture.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Texture.update'>update</h3><p class='code'><a href='#Texture'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Texture.render'>render</h3><p class='code'><a href='#Texture'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Texture.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Texture.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Texture'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Texture.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Texture.left'>left</h3><p class='code'><a href='#Texture'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Texture.center'>center</h3><p class='code'><a href='#Texture'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Texture.right'>right</h3><p class='code'><a href='#Texture'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Texture.top'>top</h3><p class='code'><a href='#Texture'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Texture.middle'>middle</h3><p class='code'><a href='#Texture'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Texture.bottom'>bottom</h3><p class='code'><a href='#Texture'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Texture.setBitmap'>setBitmap</h3><p class='code'><i>int</i> setBitmap(<i>Bitmap</i> bitmap)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Texture.getBitmap'>getBitmap</h3><p class='code'><i>Bitmap</i> getBitmap()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Texture.load'>load</h3><p class='code'><a href='#Texture'>this</a> load(<i>string</i> file)</p><p class='help'>Loads an image file and uses it. Returns null on failure.</p></div><div class='function'><h3 id='Texture.save'>save</h3><p class='code'><a href='#Texture'>this</a> save(<i>string</i> file</p><p class='help'>Saves the current content to a PNG image file.</p></div><div class='function'><h3 id='Texture.create'>create</h3><p class='code'><i>int</i> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Re-)creates the texture with the given dimensions. Returns non-zero on success.</p></div><div class='function'><h3 id='Texture.duplicate'>duplicate</h3><p class='code'><a href='#Texture'>Texture</a> duplicate()</p><p class='help'>Creates and returns a duplicate of the texture. The returned texture object has its own texture memory.</p></div><div class='function'><h3 id='Texture.clear'>clear</h3><p class='code'><a href='#Texture'>this</a> clear((optional) <i>string</i> color)</p><p class='help'>Fills the texture with the given or set clear color.</p></div><div class='function'><h3 id='Texture.pick'>pick</h3><p class='code'><i>string</i> pick(<i>int</i> x, <i>int</i> y)</p><p class='help'>Returns the color on the given texel position. The string has the format RRGGBBAA with hexadigital numbers. The <a href='#Color'>Color</a> can be used afterwards to translate or modify the color.</p></div><div class='function'><h3 id='Texture.resize'>resize</h3><p class='code'><a href='#Texture'>this</a> resize(<i>int</i> width, <i>int</i> height, (optional) <i>int</i> bilinear)</p><p class='help'>Resizes the texture to the given size. Optionally a bilinear filter applies. <b>On some hardware & platform combinates (especially embedded hardware) the actual dimension may differ due to power-of-two and size restrictions.</b></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Texture.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Texture.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Texture.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Texture.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Texture.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Texture.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Texture.center'>center</a> .</p></div><div class='member'><h3 id='Texture.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Texture.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Texture.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Texture.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Texture.position'>position</a> .x</p></div><div class='member'><h3 id='Texture.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Texture.position'>position</a> .y</p></div><div class='member'><h3 id='Texture.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Texture.position'>position</a> .z</p></div><div class='member'><h3 id='Texture.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Texture.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Texture.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Texture.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Texture.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Texture.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Texture.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Texture.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Texture.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='Texture.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='Texture.color'><a href='#Color'>Color</a> color</h3><p class='help'><b>Experimental.</b> The color used while rendering.</p></div><div class='member'><h3 id='Texture.clearColor'><i>string</i> clearColor</h3><p class='help'>Color that is used to clear or create the texture.</p></div><div class='member'><h3 id='Texture.opacity'><i>float</i> opacity</h3><p class='help'>Opacity of the texture while rendering.</p></div></div><hr/><div class='class'><h2 id='Canvas'>Canvas</h2><p class='code'>Canvas((optional) <i>string</i> file, (optional) <i>float</i> pos_x, (optional) <i>float</i> pos_y, (optional) <i>float</i> width, (optional) <i>float</i> height), (optional) <i>string</i> clearColor</p><p class='help'>A texture-based node object that can be drawn onto.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Canvas.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Canvas.update'>update</h3><p class='code'><a href='#Canvas'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Canvas.render'>render</h3><p class='code'><a href='#Canvas'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Canvas.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Canvas.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Canvas'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Canvas.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Canvas.left'>left</h3><p class='code'><a href='#Canvas'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Canvas.center'>center</h3><p class='code'><a href='#Canvas'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Canvas.right'>right</h3><p class='code'><a href='#Canvas'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Canvas.top'>top</h3><p class='code'><a href='#Canvas'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Canvas.middle'>middle</h3><p class='code'><a href='#Canvas'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Canvas.bottom'>bottom</h3><p class='code'><a href='#Canvas'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Canvas.setBitmap'>setBitmap</h3><p class='code'><i>int</i> setBitmap(<i>Bitmap</i> bitmap)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Canvas.getBitmap'>getBitmap</h3><p class='code'><i>Bitmap</i> getBitmap()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Canvas.load'>load</h3><p class='code'><a href='#Canvas'>this</a> load(<i>string</i> file)</p><p class='help'>Loads an image file and uses it. Returns null on failure.</p></div><div class='function'><h3 id='Canvas.save'>save</h3><p class='code'><a href='#Canvas'>this</a> save(<i>string</i> file</p><p class='help'>Saves the current content to a PNG image file.</p></div><div class='function'><h3 id='Canvas.create'>create</h3><p class='code'><i>int</i> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Re-)creates the texture with the given dimensions. Returns non-zero on success.</p></div><div class='function'><h3 id='Canvas.duplicate'>duplicate</h3><p class='code'><a href='#Texture'>Texture</a> duplicate()</p><p class='help'>Creates and returns a duplicate of the texture. The returned texture object has its own texture memory.</p></div><div class='function'><h3 id='Canvas.clear'>clear</h3><p class='code'><a href='#Canvas'>this</a> clear()</p><p class='help'>Clears the canvas with the set clear color.</p></div><div class='function'><h3 id='Canvas.pick'>pick</h3><p class='code'><i>string</i> pick(<i>int</i> x, <i>int</i> y)</p><p class='help'>Returns the color on the given texel position. The string has the format RRGGBBAA with hexadigital numbers. The <a href='#Color'>Color</a> can be used afterwards to translate or modify the color.</p></div><div class='function'><h3 id='Canvas.resize'>resize</h3><p class='code'><a href='#Canvas'>this</a> resize(<i>int</i> width, <i>int</i> height, (optional) <i>int</i> bilinear)</p><p class='help'>Resizes the texture to the given size. Optionally a bilinear filter applies. <b>On some hardware & platform combinates (especially embedded hardware) the actual dimension may differ due to power-of-two and size restrictions.</b></p></div><div class='function'><h3 id='Canvas.setSolid'>setSolid</h3><p class='code'><a href='#Canvas'>this</a> setSolid(<i>string</i> color)</p><p class='help'>Sets the fill and stroke colors to a solid color.</p></div><div class='function'><h3 id='Canvas.setLinear2'>setLinear2</h3><p class='code'><a href='#Canvas'>this</a> setLinear2(<i>string</i> color1, <i>string</i> color2, (optional) <i>float</i> horizonalScale, (optional) <i>float</i> verticalScale)</p><p class='help'>Sets the fill and stroke colors to a linear color pattern, the direction is taken from the scale parameter.</p></div><div class='function'><h3 id='Canvas.newPath'>newPath</h3><p class='code'><a href='#Canvas'>this</a> newPath()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Canvas.closePath'>closePath</h3><p class='code'><a href='#Canvas'>this</a> closePath()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Canvas.fill'>fill</h3><p class='code'><a href='#Canvas'>this</a> fill()</p><p class='help'>Fills the last path with the set color or pattern.</p></div><div class='function'><h3 id='Canvas.stroke'>stroke</h3><p class='code'><a href='#Canvas'>this</a> stroke(<i>float</i> lineWidth)</p><p class='help'>Outlines the last path with the set color or pattern.</p></div><div class='function'><h3 id='Canvas.moveTo'>moveTo</h3><p class='code'><a href='#Canvas'>this</a> moveTo(<i>float</i> x, <i>float</i> y)</p><p class='help'>Moves the path cursor to the given position.</p></div><div class='function'><h3 id='Canvas.lineTo'>lineTo</h3><p class='code'><a href='#Canvas'>this</a> lineTo(<i>float</i> x, <i>float</i> y)</p><p class='help'>Draws a line from the current position to the given position.</p></div><div class='function'><h3 id='Canvas.curveTo'>curveTo</h3><p class='code'><a href='#Canvas'>this</a> curveTo(<i>float</i> x1, <i>float</i> y1, <i>float</i> x2, <i>float</i> y2, <i>float</i> x3, <i>float</i> y3)</p><p class='help'>Draws a curve from the current position to the given position.</p></div><div class='function'><h3 id='Canvas.rectangle'>rectangle</h3><p class='code'><a href='#Canvas'>this</a> rectangle(<i>float</i> x, <i>float</i> y, <i>float</i> width, <i>float</i> height)</p><p class='help'>Draws a rectangle.</p></div><div class='function'><h3 id='Canvas.roundedRectangle'>roundedRectangle</h3><p class='code'><a href='#Canvas'>this</a> roundedRectangle(<i>float</i> x, <i>float</i> y, <i>float</i> width, <i>float</i> height, <i>float</i> cornerRadius)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Canvas.arc'>arc</h3><p class='code'><a href='#Canvas'>this</a> arc(<i>float</i> centerX, <i>float</i> centerY, <i>float</i> radius, <i>float</i> angle1, <i>float</i> angle2)</p><p class='help'>Draws an arc or a circle.</p></div><div class='function'><h3 id='Canvas.clear'>clear</h3><p class='code'><a href='#Canvas'>this</a> clear()</p><p class='help'>Clears the canvas with the set clear color.</p></div><div class='function'><h3 id='Canvas.drawText'>drawText</h3><p class='code'><a href='#Canvas'>this</a> drawText(<a href='#Font'>Font</a> font, <i>string</i> text, <i>int</i> x, <i>int</i> y, <i>string</i> solidColor, (optional) <i>int</i> outlineWidth, (optional) <i>string</i> outlineColor)</p><p class='help'>Draws text on the canvas.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Canvas.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Canvas.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Canvas.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Canvas.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Canvas.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Canvas.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Canvas.center'>center</a> .</p></div><div class='member'><h3 id='Canvas.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Canvas.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Canvas.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Canvas.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Canvas.position'>position</a> .x</p></div><div class='member'><h3 id='Canvas.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Canvas.position'>position</a> .y</p></div><div class='member'><h3 id='Canvas.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Canvas.position'>position</a> .z</p></div><div class='member'><h3 id='Canvas.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Canvas.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Canvas.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Canvas.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Canvas.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Canvas.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Canvas.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Canvas.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Canvas.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='Canvas.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='Canvas.color'><a href='#Color'>Color</a> color</h3><p class='help'><b>Experimental.</b> The color used while rendering.</p></div><div class='member'><h3 id='Canvas.clearColor'><i>string</i> clearColor</h3><p class='help'>Color that is used to clear or create the texture.</p></div><div class='member'><h3 id='Canvas.opacity'><i>float</i> opacity</h3><p class='help'>Opacity of the texture while rendering.</p></div></div><hr/><div class='class'><h2 id='Text'>Text</h2><p class='code'>Text(<i>string</i> text, <i>string</i> font, <i>int</i> x, <i>int</i> y, <i>string</i> color)</p><p class='help'>Text node class for font text rendering and caching.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Text.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Text.update'>update</h3><p class='code'><a href='#Text'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Text.render'>render</h3><p class='code'><a href='#Text'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Text.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Text.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Text'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Text.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Text.left'>left</h3><p class='code'><a href='#Text'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Text.center'>center</h3><p class='code'><a href='#Text'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Text.right'>right</h3><p class='code'><a href='#Text'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Text.top'>top</h3><p class='code'><a href='#Text'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Text.middle'>middle</h3><p class='code'><a href='#Text'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Text.bottom'>bottom</h3><p class='code'><a href='#Text'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Text.setBitmap'>setBitmap</h3><p class='code'><i>int</i> setBitmap(<i>Bitmap</i> bitmap)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Text.getBitmap'>getBitmap</h3><p class='code'><i>Bitmap</i> getBitmap()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Text.load'>load</h3><p class='code'><a href='#Text'>this</a> load(<i>string</i> file)</p><p class='help'>Loads an image file and uses it. Returns null on failure.</p></div><div class='function'><h3 id='Text.save'>save</h3><p class='code'><a href='#Text'>this</a> save(<i>string</i> file</p><p class='help'>Saves the current content to a PNG image file.</p></div><div class='function'><h3 id='Text.create'>create</h3><p class='code'><i>int</i> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Re-)creates the texture with the given dimensions. Returns non-zero on success.</p></div><div class='function'><h3 id='Text.duplicate'>duplicate</h3><p class='code'><a href='#Texture'>Texture</a> duplicate()</p><p class='help'>Creates and returns a duplicate of the texture. The returned texture object has its own texture memory.</p></div><div class='function'><h3 id='Text.clear'>clear</h3><p class='code'><a href='#Text'>this</a> clear((optional) <i>string</i> color)</p><p class='help'>Fills the texture with the given or set clear color.</p></div><div class='function'><h3 id='Text.pick'>pick</h3><p class='code'><i>string</i> pick(<i>int</i> x, <i>int</i> y)</p><p class='help'>Returns the color on the given texel position. The string has the format RRGGBBAA with hexadigital numbers. The <a href='#Color'>Color</a> can be used afterwards to translate or modify the color.</p></div><div class='function'><h3 id='Text.resize'>resize</h3><p class='code'><a href='#Text'>this</a> resize(<i>int</i> width, <i>int</i> height, (optional) <i>int</i> bilinear)</p><p class='help'>Resizes the texture to the given size. Optionally a bilinear filter applies. <b>On some hardware & platform combinates (especially embedded hardware) the actual dimension may differ due to power-of-two and size restrictions.</b></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Text.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Text.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Text.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Text.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Text.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Text.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Text.center'>center</a> .</p></div><div class='member'><h3 id='Text.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Text.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Text.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Text.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Text.position'>position</a> .x</p></div><div class='member'><h3 id='Text.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Text.position'>position</a> .y</p></div><div class='member'><h3 id='Text.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Text.position'>position</a> .z</p></div><div class='member'><h3 id='Text.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Text.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Text.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Text.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Text.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Text.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Text.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Text.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Text.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='Text.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='Text.color'><i>string</i> color</h3><p class='help'></p></div><div class='member'><h3 id='Text.clearColor'><i>string</i> clearColor</h3><p class='help'>Color that is used to clear or create the texture.</p></div><div class='member'><h3 id='Text.opacity'><i>float</i> opacity</h3><p class='help'>Opacity of the texture while rendering.</p></div><div class='member'><h3 id='Text.font'><i>object</i> font</h3><p class='help'></p></div><div class='member'><h3 id='Text.text'><i>string</i> text</h3><p class='help'></p></div><div class='member'><h3 id='Text.color'><i>string</i> color</h3><p class='help'></p></div><div class='member'><h3 id='Text.outline'><i>int</i> outline</h3><p class='help'></p></div><div class='member'><h3 id='Text.password'><i>int</i> password</h3><p class='help'></p></div><div class='member'><h3 id='Text.passwordLength'><i>int</i> passwordLength</h3><p class='help'></p></div><div class='member'><h3 id='Text.outlineColor'><i>string</i> outlineColor</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='Shader'>Shader</h2><p class='code'>Shader(<i>string</i> vertexShaderFile, <i>string</i> fragmentShaderFile)</p><p class='help'>GLSL shader node class. All childs of this node are rendered with this shader. If <a href='#Shader.active'>active</a> is set to zero all shaders are disabled at this point.</p><p class='caption'>Example:</p><div class='example'><pre>global DIM_X = 800;
global DIM_Y = 600;
global BLUR = 2;

global OnKeyDown = function(e) {
    global BLUR;
    log("key: "+e.key);
	if((e.key == 187 || e.key == 107 || e.key == 35 || e.key == 86) && BLUR < 5) { BLUR += 1; SHADER.setInt("FILTER_SIZE", BLUR); }
	if((e.key == 189 || e.key == 109 || e.key == 61 || e.key == 82) && BLUR > 0) { BLUR -= 1; SHADER.setInt("FILTER_SIZE", BLUR); }
	FRAME.root["info"].text = "Blur: "+BLUR;
};

global FRAME = Frame("Shader Example", 200, 100, DIM_X, DIM_Y).toggle().showCursor(true);
FRAME.onKeyDown = OnKeyDown;

global SHADER = Shader("shaders/basic.vs", "shaders/blur.fs");
SHADER.setInt("FILTER_SIZE", BLUR);
SHADER.setFloat2("FILTER_SCALE", 1.0 / DIM_X * 2.0, 1.0 / DIM_Y * 2.0);

FRAME.root["shader"] = SHADER;
FRAME.root["shader"]["image"] = Texture("images/earth-bg.jpg", 0, 0, DIM_X, DIM_Y);

FRAME.root["help"] = Text("Press + and - to adjust blur filter size.", Font("fonts/liberation/LiberationSerif-Bold.ttf", 20));
FRAME.root["info"] = Text("Blur: "+BLUR, Font("fonts/arial.ttf", 20), 0, 30);

while(1) {
    FRAME.render();
    yield();
}
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Shader.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Shader.update'>update</h3><p class='code'><a href='#Shader'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Shader.render'>render</h3><p class='code'><a href='#Shader'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Shader.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Shader.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Shader'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Shader.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Shader.left'>left</h3><p class='code'><a href='#Shader'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Shader.center'>center</h3><p class='code'><a href='#Shader'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Shader.right'>right</h3><p class='code'><a href='#Shader'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Shader.top'>top</h3><p class='code'><a href='#Shader'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Shader.middle'>middle</h3><p class='code'><a href='#Shader'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Shader.bottom'>bottom</h3><p class='code'><a href='#Shader'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Shader.load'>load</h3><p class='code'><i>int</i> load(<i>string</i> vertexShaderFile, <i>string</i> fragmentShaderFile), (optional) <i>int</i> fromFiles</p><p class='help'>Loads the vertex and fragment shaders from the given files or directly from the strings (if the third parameter is set to zero). Returns non-zero on success.</p></div><div class='function'><h3 id='Shader.setFloat'>setFloat</h3><p class='code'><a href='#Shader'>this</a> setFloat(<i>float</i> x)</p><p class='help'>Sets float uniform in shader.</p></div><div class='function'><h3 id='Shader.setFloat2'>setFloat2</h3><p class='code'><a href='#Shader'>this</a> setFloat2(<i>float</i> x, <i>float</i> y)</p><p class='help'>Sets float vec2 uniform in shader.</p></div><div class='function'><h3 id='Shader.setFloat3'>setFloat3</h3><p class='code'><a href='#Shader'>this</a> setFloat3(<i>float</i> x, <i>float</i> y, float z)</p><p class='help'>Sets float vec3 uniform in shader.</p></div><div class='function'><h3 id='Shader.setFloat4'>setFloat4</h3><p class='code'><a href='#Shader'>this</a> setFloat4(<i>float</i> x, <i>float</i> y, float z, float w)</p><p class='help'>Sets float vec4 uniform in shader.</p></div><div class='function'><h3 id='Shader.setInt'>setInt</h3><p class='code'><a href='#Shader'>this</a> setInt(<i>int</i> n)</p><p class='help'>Sets integer uniform in shader.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Shader.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Shader.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Shader.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Shader.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Shader.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Shader.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Shader.center'>center</a> .</p></div><div class='member'><h3 id='Shader.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Shader.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Shader.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Shader.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Shader.position'>position</a> .x</p></div><div class='member'><h3 id='Shader.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Shader.position'>position</a> .y</p></div><div class='member'><h3 id='Shader.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Shader.position'>position</a> .z</p></div><div class='member'><h3 id='Shader.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Shader.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Shader.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Shader.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Shader.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Shader.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Shader.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Shader.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Shader.active'><i>int</i> active</h3><p class='help'>Sets if the childs are rendered with or without this shader.</p></div></div><hr/><div class='class'><h2 id='Framebuffer'>Framebuffer</h2><p class='code'>Framebuffer((optional) <i>string</i> file, (optional) <i>float</i> pos_x, (optional) <i>float</i> pos_y, (optional) <i>float</i> width, (optional) <i>float</i> height), (optional) <i>string</i> clearColor</p><p class='help'>Framebuffer for off-screen, special-effects or capture rendering. All childs are rendered into the framebuffer. Then framebuffer itself can be then be rendered too.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Framebuffer.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Framebuffer.update'>update</h3><p class='code'><a href='#Framebuffer'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Framebuffer.render'>render</h3><p class='code'><a href='#Framebuffer'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Framebuffer.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Framebuffer.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Framebuffer'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Framebuffer.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Framebuffer.left'>left</h3><p class='code'><a href='#Framebuffer'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Framebuffer.center'>center</h3><p class='code'><a href='#Framebuffer'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Framebuffer.right'>right</h3><p class='code'><a href='#Framebuffer'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Framebuffer.top'>top</h3><p class='code'><a href='#Framebuffer'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Framebuffer.middle'>middle</h3><p class='code'><a href='#Framebuffer'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Framebuffer.bottom'>bottom</h3><p class='code'><a href='#Framebuffer'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Framebuffer.setBitmap'>setBitmap</h3><p class='code'><i>int</i> setBitmap(<i>Bitmap</i> bitmap)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Framebuffer.getBitmap'>getBitmap</h3><p class='code'><i>Bitmap</i> getBitmap()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Framebuffer.load'>load</h3><p class='code'><a href='#Framebuffer'>this</a> load(<i>string</i> file)</p><p class='help'>Loads an image file and uses it. Returns null on failure.</p></div><div class='function'><h3 id='Framebuffer.save'>save</h3><p class='code'><a href='#Framebuffer'>this</a> save(<i>string</i> file</p><p class='help'>Saves the current content to a PNG image file.</p></div><div class='function'><h3 id='Framebuffer.create'>create</h3><p class='code'><i>int</i> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Re-)creates the texture with the given dimensions. Returns non-zero on success.</p></div><div class='function'><h3 id='Framebuffer.duplicate'>duplicate</h3><p class='code'><a href='#Texture'>Texture</a> duplicate()</p><p class='help'>Creates and returns a duplicate of the texture. The returned texture object has its own texture memory.</p></div><div class='function'><h3 id='Framebuffer.clear'>clear</h3><p class='code'><a href='#Framebuffer'>this</a> clear((optional) <i>string</i> color)</p><p class='help'>Fills the texture with the given or set clear color.</p></div><div class='function'><h3 id='Framebuffer.pick'>pick</h3><p class='code'><i>string</i> pick(<i>int</i> x, <i>int</i> y)</p><p class='help'>Returns the color on the given texel position. The string has the format RRGGBBAA with hexadigital numbers. The <a href='#Color'>Color</a> can be used afterwards to translate or modify the color.</p></div><div class='function'><h3 id='Framebuffer.resize'>resize</h3><p class='code'><a href='#Framebuffer'>this</a> resize(<i>int</i> width, <i>int</i> height, (optional) <i>int</i> bilinear)</p><p class='help'>Resizes the texture to the given size. Optionally a bilinear filter applies. <b>On some hardware & platform combinates (especially embedded hardware) the actual dimension may differ due to power-of-two and size restrictions.</b></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Framebuffer.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Framebuffer.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Framebuffer.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Framebuffer.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Framebuffer.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Framebuffer.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Framebuffer.center'>center</a> .</p></div><div class='member'><h3 id='Framebuffer.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Framebuffer.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Framebuffer.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Framebuffer.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Framebuffer.position'>position</a> .x</p></div><div class='member'><h3 id='Framebuffer.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Framebuffer.position'>position</a> .y</p></div><div class='member'><h3 id='Framebuffer.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Framebuffer.position'>position</a> .z</p></div><div class='member'><h3 id='Framebuffer.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Framebuffer.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Framebuffer.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Framebuffer.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Framebuffer.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Framebuffer.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Framebuffer.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Framebuffer.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Framebuffer.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='Framebuffer.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='Framebuffer.color'><a href='#Color'>Color</a> color</h3><p class='help'><b>Experimental.</b> The color used while rendering.</p></div><div class='member'><h3 id='Framebuffer.clearColor'><i>string</i> clearColor</h3><p class='help'>Color that is used to clear or create the texture.</p></div><div class='member'><h3 id='Framebuffer.opacity'><i>float</i> opacity</h3><p class='help'>Opacity of the texture while rendering.</p></div><div class='member'><h3 id='Framebuffer.enabled'><i>int</i> enabled</h3><p class='help'>Enables or disables framebuffer update. When disabled (enabled = false), updating and child-rendering is skipped and the current content is reused when rendering the node.</p></div></div><hr/><div class='class'><h2 id='Recorder'>Recorder</h2><p class='code'>Recorder((optional) <i>string</i> id, (optional) <i>float</i> pos_x, (optional) <i>float</i> pos_y, (optional) <i>float</i> width, (optional) <i>float</i> height)</p><p class='help'>A Recorder node can store a sequence of frames of its childs in a ringbuffer of textures. However, it must be noted that for realtime purpose, the storage is limited by the OpenGL texture memory.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Recorder.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Recorder.update'>update</h3><p class='code'><a href='#Recorder'>this</a> update()</p><p class='help'>Force this node to update its contents and states. May be needed if the node is changed by the script after initialization.</p></div><div class='function'><h3 id='Recorder.render'>render</h3><p class='code'><a href='#Recorder'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Recorder.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Recorder.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Recorder'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Recorder.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Recorder.left'>left</h3><p class='code'><a href='#Recorder'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Recorder.center'>center</h3><p class='code'><a href='#Recorder'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Recorder.right'>right</h3><p class='code'><a href='#Recorder'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Recorder.top'>top</h3><p class='code'><a href='#Recorder'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Recorder.middle'>middle</h3><p class='code'><a href='#Recorder'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Recorder.bottom'>bottom</h3><p class='code'><a href='#Recorder'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Recorder.save'>save</h3><p class='code'><a href='#Recorder'>this</a> save(<i>string</i> folder</p><p class='help'>Saves the stored sequence into the given folder.</p></div><div class='function'><h3 id='Recorder.getFrame'>getFrame</h3><p class='code'><a href='#Texture'>Texture</a> getFrame(<i>int</i> index)</p><p class='help'>Gets the Nth frame texture of the stored sequence.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Recorder.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Recorder.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Recorder.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Recorder.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Recorder.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Recorder.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Recorder.center'>center</a> .</p></div><div class='member'><h3 id='Recorder.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Recorder.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Recorder.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Recorder.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Recorder.position'>position</a> .x</p></div><div class='member'><h3 id='Recorder.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Recorder.position'>position</a> .y</p></div><div class='member'><h3 id='Recorder.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Recorder.position'>position</a> .z</p></div><div class='member'><h3 id='Recorder.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Recorder.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Recorder.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Recorder.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Recorder.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Recorder.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Recorder.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Recorder.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Recorder.numFrames'><i>int</i> numFrames</h3><p class='help'>Number to frames in sequence to store.</p></div><div class='member'><h3 id='Recorder.currentFrame'><i>int</i> currentFrame</h3><p class='help'>The current frame that gets rendered into.</p></div><div class='member'><h3 id='Recorder.enabled'><i>int</i> enabled</h3><p class='help'></p></div><div class='member'><h3 id='Recorder.record'><i>int</i> record</h3><p class='help'>Set to non-zero to record frames.</p></div><div class='member'><h3 id='Recorder.recordWidth'><i>int</i> recordWidth</h3><p class='help'>Width of the record resolution.</p></div><div class='member'><h3 id='Recorder.recordHeight'><i>int</i> recordHeight</h3><p class='help'>Height of the record resolution.</p></div></div><hr/><div class='class'><h2 id='Detector'>Detector</h2><p class='code'>Detector((optional) <i>string</i> file)</p><p class='help'>Haar-Cascade detector. Can detect objects, persons, faces, etc. on a given bitmap image.</p><p class='caption'>Example:</p><div class='example'><pre>global FRAME = Frame("main", 0, 0, 640, 480, "#ff00ff").toggle().showCursor(true);
FRAME.onKeyDown = function(e) {   if(e.key == 'C') { e.sender.root["camera"].config(); }   };
FRAME.root["camera"] = Camera(0, 0, 0, 640, 480, 0);
FRAME.root["found"] = Texture("images/face_detect.png", 0,0, 0,0);

global DETECTOR = Detector("haar/haarcascade_frontalface_default.xml");

while(1) {
    FRAME.root["camera"].update();
	local numFindings = DETECTOR.detect(FRAME.root["camera"].snapshotBitmap().flipY().flipX(), 200);
	
	local i = 0;
	local finding = 0;
	FRAME.root["found"].visible = false;
	
	while(1) {
		finding = DETECTOR.getFinding(i);
		if(!finding) { break; }
		i += 1;
		
		FRAME.root["found"].x = finding.left;
		FRAME.root["found"].y = finding.top;
		FRAME.root["found"].width = finding.right - finding.left;
		FRAME.root["found"].height = finding.bottom - finding.top;
		
		FRAME.root["found"].visible = true;
	}
	
    FRAME.render();
	yield();
}
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Detector.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Detector.loadHaarCascade'>loadHaarCascade</h3><p class='code'><i>int</i> loadHaarCascade(<i>sting</i> file)</p><p class='help'>Loads a haar-cascade file.</p></div><div class='function'><h3 id='Detector.detect'>detect</h3><p class='code'><i>int</i> detect(<a href='#Bitmap'>Bitmap</a> bitmap, <i>int</i> minSize)</p><p class='help'>Run haar-cascade detection on the given bitmap. Returns the number of findings in the bitmap.</p></div><div class='function'><h3 id='Detector.getFinding'>getFinding</h3><p class='code'><a href='#Rect'>Rect</a> getFinding(<i>int</i> index)</p><p class='help'>Gets the finding with the given index. Returns a <a href='#Rect'>Rect</a> object with the coordinates on the source bitmap.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Detector.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Socket'>Socket</h2><p class='code'>Socket((optional) <i>string</i> id)</p><p class='help'>Socket class.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Socket.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Socket.open'>open</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Socket.openUDP'>openUDP</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Socket.close'>close</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Socket.send'>send</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Socket.receive'>receive</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Socket.setTimeout'>setTimeout</h3><p class='code'><a href='#Socket'>this</a> setTimeout(<i>int</i> seconds)</p><p class='help'>Sets the timeout (in seconds) to wait for data while receiving. A value of 0 sets the socket to non-blocking.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Socket.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Socket.data'><a href='#Data'>Data</a> data</h3><p class='help'>Received data buffer. You may use <i>toString()</i> on this to get a string representation.</p></div></div><hr/><div class='class'><h2 id='Listener'>Listener</h2><p class='code'>Listener((optional) <i>string</i> id)</p><p class='help'>Listener class.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Listener.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Listener.bind'>bind</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.bindUDP'>bindUDP</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.listen'>listen</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.listenUDP'>listenUDP</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.accept'>accept</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.receive'>receive</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.send'>send</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.close'>close</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Listener.setTimeout'>setTimeout</h3><p class='code'><a href='#Listener'>this</a> setTimeout(<i>int</i> seconds)</p><p class='help'>Sets the timeout (in seconds) to wait for data while receiving. A value of 0 sets the socket to non-blocking.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Listener.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Listener.data'><a href='#Data'>Data</a> data</h3><p class='help'>Received data buffer. You may use <i>toString()</i> on this to get a string representation.</p></div><div class='member'><h3 id='Listener.client'><i>string</i> client</h3><p class='help'>String of IP address of the last accepted client.</p></div></div><hr/><div class='class'><h2 id='HttpServer'>HttpServer</h2><p class='code'>HttpServer(<i>string</i> port, <i>string</i> docroot, <i>bool</i> dirListing)</p><p class='help'>Spawns a HTTP server. Note that bindung to port 80 may need root privileges. It is neccessary to call the poll() method since there is no background thread handling the requests.</p><p class='caption'>Example:</p><div class='example'><pre>global SERVER = HttpServer("8080", ".", true);
SERVER.onRequest = function(url, get, post, auth) {
    if(auth != "xstart:asdf") { this.sendAuthRequest("Login"); return; }
    SERVER.sendFile();
};
SERVER._admin = function(url, get, post, auth) {
    if(auth != "xstart:asdf") { this.sendAuthRequest("Login"); return; }
    this.send("hi master");
};
SERVER._source = function(url, get, post, auth) {
    if(auth != "xstart:asdf") { this.sendAuthRequest("Login"); return; }
    SERVER.sendFile("httpserver.gm");
};
start("explorer http://127.0.0.1:8080/");
while(true) {
    SERVER.poll(1.0);
    yield();
}
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='HttpServer.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='HttpServer.poll'>poll</h3><p class='code'><a href='#HttpServer'>this</a> poll(<i>float</i> timeoutSeconds)</p><p class='help'>Polls for incoming http requests.</p></div><div class='function'><h3 id='HttpServer.onRequest'>onRequest</h3><p class='code'>onRequest(<i>string</i> url, <i>string</i> get, <i>string</i> post, <i>string</i> auth)</p><p class='help'>Request handler/callback, the default request handler sends a 404 http error code to all request. Override this handler to your own logic.</p></div><div class='function'><h3 id='HttpServer.sendFile'>sendFile</h3><p class='code'>sendFile((optional)<i>string</i> file)</p><p class='help'>When called inside the request-handler, it send a file to the client. If the file parameter is omitted, it sends the requested file from the URI.</p></div><div class='function'><h3 id='HttpServer.send'>send</h3><p class='code'><a href='#HttpServer'>this</a> send(<i>string</i> data)</p><p class='help'>When called inside the request-handler, it sends a string back to the client.</p></div><div class='function'><h3 id='HttpServer.send404'>send404</h3><p class='code'><a href='#HttpServer'>this</a> send404()</p><p class='help'>When called inside the request-handler, it sends a a 404 error back to the client.</p></div><div class='function'><h3 id='HttpServer.sendAuthRequest'>sendAuthRequest</h3><p class='code'><a href='#HttpServer'>this</a> sendAuthRequest(<i>string</i> message)</p><p class='help'>When called inside the request-handler, it sends a authorizsation request ('401 Access Denied') back to the client.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='HttpServer.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Serial'>Serial</h2><p class='code'>Serial((optional) <i>string</i> id)</p><p class='help'>Serial class</p><p class='caption'>Functions:</p><div class='function'><h3 id='Serial.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Serial.open'>open</h3><p class='code'><a href='#Serial'>this</a> open((optional) <i>string</i> port, (optional) <i>int</i> baudrate)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Serial.close'>close</h3><p class='code'><a href='#Serial'>this</a> close()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Serial.flush'>flush</h3><p class='code'><a href='#Serial'>this</a> flush()</p><p class='help'>NOT SUPPORTED ON WINDOWS!</p></div><div class='function'><h3 id='Serial.peek'>peek</h3><p class='code'><i>int</i> peek()</p><p class='help'>NOT SUPPORTED ON WINDOWS!</p></div><div class='function'><h3 id='Serial.write'>write</h3><p class='code'><a href='#Serial'>this</a> write(<i>string</i> data)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Serial.writeData'>writeData</h3><p class='code'><a href='#Serial'>this</a> writeData(<a href='#Data'>Data</a> data)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Serial.read'>read</h3><p class='code'><i>string</i> read(<i>float</i> timeoutSeconds)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Serial.readEx'>readEx</h3><p class='code'><i>string</i> read(<i>int</i> maxChar, <i>int</i> endChar, <i>float</i> timeoutSeconds)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Serial.readData'>readData</h3><p class='code'><a href='#Data'>Data</a> readData(<i>int</i> maxChar, <i>float</i> timeoutSeconds)</p><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Serial.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='AudioDevice'>AudioDevice</h2><p class='code'>AudioDevice(<i>int</i> sampleRate, <i>int</i> channels, <i>int</i> bufferSize, <i>int</i> deviceInIndex, <i>int</i> deviceOutIndex)</p><p class='help'>Audio device for recording, playing and processing audio.</p><p class='caption'>Example:</p><div class='example'><pre>// enumerate audio devices
global ADEVICE_ENUM = AudioDeviceInfo();
for(i=0; true; i+=1) {
	ADEVICE_ENUM.getDevice(i);
	if(ADEVICE_ENUM.index == -1) { break; }
	log("Found audio-device: "+ADEVICE_ENUM.name);
}

// play some sound
global DEVICE = AudioDevice(22050, 2, 512, -1, 3);
global SOUND = AudioFile("misc/snap.wav").convert(22050,16);
DEVICE.play(SOUND);
sleep(2.0);
DEVICE.close();
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='AudioDevice.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='AudioDevice.open'>open</h3><p class='code'><a href='#AudioDevice'>this</a> open(<i>int</i> sampleRate, <i>int</i> channels, <i>int</i> bufferSize, <i>int</i> deviceInIndex, <i>int</i> deviceOutIndex)</p><p class='help'>Opens the audio device with the given settings. If the device is already open it will be closed first.</p></div><div class='function'><h3 id='AudioDevice.close'>close</h3><p class='code'><a href='#AudioDevice'>this</a> close()</p><p class='help'>Closes the audio device.</p></div><div class='function'><h3 id='AudioDevice.pause'>pause</h3><p class='code'><a href='#AudioDevice'>this</a> pause()</p><p class='help'>Pauses the audio stream.</p></div><div class='function'><h3 id='AudioDevice.unpause'>unpause</h3><p class='code'><a href='#AudioDevice'>this</a> unpause()</p><p class='help'>Unpauses the audio stream.</p></div><div class='function'><h3 id='AudioDevice.play'>play</h3><p class='code'><a href='#AudioDevice'>this</a> play(<a href='#AudioData'>AudioData</a> source)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='AudioDevice.stop'>stop</h3><p class='code'><a href='#AudioDevice'>this</a> stop(<a href='#AudioData'>AudioData</a> buffer</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='AudioDevice.process'>process</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='AudioDevice.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='AudioDevice.input'><i>object</i> input</h3><p class='help'></p></div><div class='member'><h3 id='AudioDevice.output'><i>object</i> output</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='AudioDeviceInfo'>AudioDeviceInfo</h2><p class='code'>AudioDeviceInfo(<i>int</i> index, (optional) <i>string</i> name, (optional) <i>string</i> api, (optional) <i>int</i> minOutputChannels, (optional) <i>int</i> minInputChannels)</p><p class='help'>Audio device information. Find and enumerate audio devices.</p><p class='caption'>Functions:</p><div class='function'><h3 id='AudioDeviceInfo.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='AudioDeviceInfo.getDevice'>getDevice</h3><p class='code'><a href='#AudioDeviceInfo'>this</a> getDevice(<i>int</i> index, (optional) <i>string</i> name, (optional) <i>string</i> api, (optional) <i>int</i> minInputChannels, (optional) <i>int</i> minOutputChannels)</p><p class='help'>Gets the device that matches the name. Only the given length will be compared, case is ignored. If no devices matches, the index is set to -1.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='AudioDeviceInfo.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='AudioDeviceInfo.numDevices'><i>int</i> numDevices</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.index'><i>int</i> index</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.name'><i>string</i> name</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.apiIndex'><i>int</i> apiIndex</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.api'><i>string</i> api</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.inputChannels'><i>int</i> inputChannels</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.outputChannels'><i>int</i> outputChannels</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.sampleRate'><i>float</i> sampleRate</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.lowInputLatency'><i>float</i> lowInputLatency</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.lowOutputLatency'><i>float</i> lowOutputLatency</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.highInputLatency'><i>float</i> highInputLatency</h3><p class='help'></p></div><div class='member'><h3 id='AudioDeviceInfo.highOutputLatency'><i>float</i> highOutputLatency</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='AudioFile'>AudioFile</h2><p class='code'>AudioFile(<i>string</i> file)</p><p class='help'></p><p class='caption'>Functions:</p><div class='function'><h3 id='AudioFile.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='AudioFile.loadRaw'>loadRaw</h3><p class='code'><a href='#AudioFile'>this</a> loadRaw(<i>string</i> file)</p><p class='help'>Loads the given file into data memory as is.</p></div><div class='function'><h3 id='AudioFile.saveRaw'>saveRaw</h3><p class='code'><a href='#AudioFile'>this</a> saveRaw(<i>string</i> file)</p><p class='help'>Saves the data into a file as is.</p></div><div class='function'><h3 id='AudioFile.appendRaw'>appendRaw</h3><p class='code'><a href='#AudioFile'>this</a> appendRaw(<i>string</i> file)</p><p class='help'>Appends the data to an existing file as is.</p></div><div class='function'><h3 id='AudioFile.peek'>peek</h3><p class='code'><i>int</i> peek(<i>int</i> addr)</p><p class='help'>Reads a single byte from the given address.</p></div><div class='function'><h3 id='AudioFile.poke'>poke</h3><p class='code'><a href='#AudioFile'>this</a> poke(<i>int</i> addr, <i>int</i> value)</p><p class='help'>Writes a single byte to the given address.</p></div><div class='function'><h3 id='AudioFile.resize'>resize</h3><p class='code'><i>int</i> resize(<i>int</i> newsize)</p><p class='help'>Resizes the data array length.</p></div><div class='function'><h3 id='AudioFile.copyFrom'>copyFrom</h3><p class='code'><a href='#AudioFile'>this</a> copyFrom(<i>Data</i> source)</p><p class='help'>Makes a copy of the source data. Any old data in this object will be lost.</p></div><div class='function'><h3 id='AudioFile.insert'>insert</h3><p class='code'><a href='#AudioFile'>this</a> insert(<i>Data</i> source, <i>int</i> position)</p><p class='help'>Copies the source data to the given position. The data may be resized to fit the added content.</p></div><div class='function'><h3 id='AudioFile.convert'>convert</h3><p class='code'><a href='#AudioFile'>this</a> convert(<i>int</i> sampleRate, <i>int</i> bitsPerSample</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='AudioFile.load'>load</h3><p class='code'><a href='#AudioFile'>this</a> load(<i>string</i> fileName)</p><p class='help'>Loads the given RIFF/WAV file into a audio buffer in memory.</p></div><div class='function'><h3 id='AudioFile.save'>save</h3><p class='code'><a href='#AudioFile'>this</a> save(<i>string</i> fileName)</p><p class='help'>Saves the current audio buffer to a RIFF/WAV file.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='AudioFile.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='AudioFile.size'><i>int</i> size</h3><p class='help'>(readonly) Size of data array.</p></div><div class='member'><h3 id='AudioFile.loop'><i>bool</i> loop</h3><p class='help'>Set to true to wrap the read and write cursor when they reach the end of the stream.</p></div><div class='member'><h3 id='AudioFile.readCursor'><i>int</i> readCursor</h3><p class='help'>Read cursor.</p></div><div class='member'><h3 id='AudioFile.writeCursor'><i>int</i> writeCursor</h3><p class='help'>Write cursor.</p></div><div class='member'><h3 id='AudioFile.multiplay'><i>int</i> multiplay</h3><p class='help'>Allow to duplicate this audiobuffer for playing multiple instances simultaneously.</p></div><div class='member'><h3 id='AudioFile.playing'><i>int</i> playing</h3><p class='help'>Audiobuffer is currently playing.</p></div><div class='member'><h3 id='AudioFile.volume'><i>float</i> volume</h3><p class='help'>Volume of audio playback for this buffer. Ranges from 0.0 to 1.0.</p></div><div class='member'><h3 id='AudioFile.bytesAvailable'><i>int</i> bytesAvailable</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='AudioFilter'>AudioFilter</h2><p class='code'>AudioFilter(<a href='#AudioData'>AudioData</a> source)</p><p class='help'></p><p class='caption'>Functions:</p><div class='function'><h3 id='AudioFilter.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='AudioFilter.loadRaw'>loadRaw</h3><p class='code'><a href='#AudioFilter'>this</a> loadRaw(<i>string</i> file)</p><p class='help'>Loads the given file into data memory as is.</p></div><div class='function'><h3 id='AudioFilter.saveRaw'>saveRaw</h3><p class='code'><a href='#AudioFilter'>this</a> saveRaw(<i>string</i> file)</p><p class='help'>Saves the data into a file as is.</p></div><div class='function'><h3 id='AudioFilter.appendRaw'>appendRaw</h3><p class='code'><a href='#AudioFilter'>this</a> appendRaw(<i>string</i> file)</p><p class='help'>Appends the data to an existing file as is.</p></div><div class='function'><h3 id='AudioFilter.peek'>peek</h3><p class='code'><i>int</i> peek(<i>int</i> addr)</p><p class='help'>Reads a single byte from the given address.</p></div><div class='function'><h3 id='AudioFilter.poke'>poke</h3><p class='code'><a href='#AudioFilter'>this</a> poke(<i>int</i> addr, <i>int</i> value)</p><p class='help'>Writes a single byte to the given address.</p></div><div class='function'><h3 id='AudioFilter.resize'>resize</h3><p class='code'><i>int</i> resize(<i>int</i> newsize)</p><p class='help'>Resizes the data array length.</p></div><div class='function'><h3 id='AudioFilter.copyFrom'>copyFrom</h3><p class='code'><a href='#AudioFilter'>this</a> copyFrom(<i>Data</i> source)</p><p class='help'>Makes a copy of the source data. Any old data in this object will be lost.</p></div><div class='function'><h3 id='AudioFilter.insert'>insert</h3><p class='code'><a href='#AudioFilter'>this</a> insert(<i>Data</i> source, <i>int</i> position)</p><p class='help'>Copies the source data to the given position. The data may be resized to fit the added content.</p></div><div class='function'><h3 id='AudioFilter.convert'>convert</h3><p class='code'><a href='#AudioFilter'>this</a> convert(<i>int</i> sampleRate, <i>int</i> bitsPerSample</p><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='AudioFilter.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='AudioFilter.size'><i>int</i> size</h3><p class='help'>(readonly) Size of data array.</p></div><div class='member'><h3 id='AudioFilter.loop'><i>bool</i> loop</h3><p class='help'>Set to true to wrap the read and write cursor when they reach the end of the stream.</p></div><div class='member'><h3 id='AudioFilter.readCursor'><i>int</i> readCursor</h3><p class='help'>Read cursor.</p></div><div class='member'><h3 id='AudioFilter.writeCursor'><i>int</i> writeCursor</h3><p class='help'>Write cursor.</p></div><div class='member'><h3 id='AudioFilter.multiplay'><i>int</i> multiplay</h3><p class='help'>Allow to duplicate this audiobuffer for playing multiple instances simultaneously.</p></div><div class='member'><h3 id='AudioFilter.playing'><i>int</i> playing</h3><p class='help'>Audiobuffer is currently playing.</p></div><div class='member'><h3 id='AudioFilter.volume'><i>float</i> volume</h3><p class='help'>Volume of audio playback for this buffer. Ranges from 0.0 to 1.0.</p></div><div class='member'><h3 id='AudioFilter.bytesAvailable'><i>int</i> bytesAvailable</h3><p class='help'></p></div><div class='member'><h3 id='AudioFilter.enabled'><i>int</i> enabled</h3><p class='help'></p></div><div class='member'><h3 id='AudioFilter.seconds'><a href='#int'>int</a> seconds</h3><p class='help'>Number of seconds for the history buffer.</p></div><div class='member'><h3 id='AudioFilter.source'><a href='#AudioData'>AudioData</a> source</h3><p class='help'>Source for streaming audio data to a device.</p></div><div class='member'><h3 id='AudioFilter.history'><a href='#AudioData'>AudioData</a> history</h3><p class='help'>Audio buffer for story the history of the sound.</p></div><div class='member'><h3 id='AudioFilter.outputFile'><i>string</i> outputFile</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='AudioPitch'>AudioPitch</h2><p class='code'>AudioPitch(<a href='#AudioData'>AudioData</a> source)</p><p class='help'></p><p class='caption'>Functions:</p><div class='function'><h3 id='AudioPitch.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='AudioPitch.loadRaw'>loadRaw</h3><p class='code'><a href='#AudioPitch'>this</a> loadRaw(<i>string</i> file)</p><p class='help'>Loads the given file into data memory as is.</p></div><div class='function'><h3 id='AudioPitch.saveRaw'>saveRaw</h3><p class='code'><a href='#AudioPitch'>this</a> saveRaw(<i>string</i> file)</p><p class='help'>Saves the data into a file as is.</p></div><div class='function'><h3 id='AudioPitch.appendRaw'>appendRaw</h3><p class='code'><a href='#AudioPitch'>this</a> appendRaw(<i>string</i> file)</p><p class='help'>Appends the data to an existing file as is.</p></div><div class='function'><h3 id='AudioPitch.peek'>peek</h3><p class='code'><i>int</i> peek(<i>int</i> addr)</p><p class='help'>Reads a single byte from the given address.</p></div><div class='function'><h3 id='AudioPitch.poke'>poke</h3><p class='code'><a href='#AudioPitch'>this</a> poke(<i>int</i> addr, <i>int</i> value)</p><p class='help'>Writes a single byte to the given address.</p></div><div class='function'><h3 id='AudioPitch.resize'>resize</h3><p class='code'><i>int</i> resize(<i>int</i> newsize)</p><p class='help'>Resizes the data array length.</p></div><div class='function'><h3 id='AudioPitch.copyFrom'>copyFrom</h3><p class='code'><a href='#AudioPitch'>this</a> copyFrom(<i>Data</i> source)</p><p class='help'>Makes a copy of the source data. Any old data in this object will be lost.</p></div><div class='function'><h3 id='AudioPitch.insert'>insert</h3><p class='code'><a href='#AudioPitch'>this</a> insert(<i>Data</i> source, <i>int</i> position)</p><p class='help'>Copies the source data to the given position. The data may be resized to fit the added content.</p></div><div class='function'><h3 id='AudioPitch.convert'>convert</h3><p class='code'><a href='#AudioPitch'>this</a> convert(<i>int</i> sampleRate, <i>int</i> bitsPerSample</p><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='AudioPitch.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='AudioPitch.size'><i>int</i> size</h3><p class='help'>(readonly) Size of data array.</p></div><div class='member'><h3 id='AudioPitch.loop'><i>bool</i> loop</h3><p class='help'>Set to true to wrap the read and write cursor when they reach the end of the stream.</p></div><div class='member'><h3 id='AudioPitch.readCursor'><i>int</i> readCursor</h3><p class='help'>Read cursor.</p></div><div class='member'><h3 id='AudioPitch.writeCursor'><i>int</i> writeCursor</h3><p class='help'>Write cursor.</p></div><div class='member'><h3 id='AudioPitch.multiplay'><i>int</i> multiplay</h3><p class='help'>Allow to duplicate this audiobuffer for playing multiple instances simultaneously.</p></div><div class='member'><h3 id='AudioPitch.playing'><i>int</i> playing</h3><p class='help'>Audiobuffer is currently playing.</p></div><div class='member'><h3 id='AudioPitch.volume'><i>float</i> volume</h3><p class='help'>Volume of audio playback for this buffer. Ranges from 0.0 to 1.0.</p></div><div class='member'><h3 id='AudioPitch.bytesAvailable'><i>int</i> bytesAvailable</h3><p class='help'></p></div><div class='member'><h3 id='AudioPitch.enabled'><i>int</i> enabled</h3><p class='help'></p></div><div class='member'><h3 id='AudioPitch.seconds'><a href='#int'>int</a> seconds</h3><p class='help'>Number of seconds for the history buffer.</p></div><div class='member'><h3 id='AudioPitch.source'><a href='#AudioData'>AudioData</a> source</h3><p class='help'>Source for streaming audio data to a device.</p></div><div class='member'><h3 id='AudioPitch.history'><a href='#AudioData'>AudioData</a> history</h3><p class='help'>Audio buffer for story the history of the sound.</p></div><div class='member'><h3 id='AudioPitch.outputFile'><i>string</i> outputFile</h3><p class='help'></p></div><div class='member'><h3 id='AudioPitch.pitch'><i>float</i> pitch</h3><p class='help'></p></div></div><hr/><div class='class'><h2 id='AudioDelay'>AudioDelay</h2><p class='code'>AudioDelay(<a href='#AudioData'>AudioData</a> source)</p><p class='help'></p><p class='caption'>Functions:</p><div class='function'><h3 id='AudioDelay.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='AudioDelay.loadRaw'>loadRaw</h3><p class='code'><a href='#AudioDelay'>this</a> loadRaw(<i>string</i> file)</p><p class='help'>Loads the given file into data memory as is.</p></div><div class='function'><h3 id='AudioDelay.saveRaw'>saveRaw</h3><p class='code'><a href='#AudioDelay'>this</a> saveRaw(<i>string</i> file)</p><p class='help'>Saves the data into a file as is.</p></div><div class='function'><h3 id='AudioDelay.appendRaw'>appendRaw</h3><p class='code'><a href='#AudioDelay'>this</a> appendRaw(<i>string</i> file)</p><p class='help'>Appends the data to an existing file as is.</p></div><div class='function'><h3 id='AudioDelay.peek'>peek</h3><p class='code'><i>int</i> peek(<i>int</i> addr)</p><p class='help'>Reads a single byte from the given address.</p></div><div class='function'><h3 id='AudioDelay.poke'>poke</h3><p class='code'><a href='#AudioDelay'>this</a> poke(<i>int</i> addr, <i>int</i> value)</p><p class='help'>Writes a single byte to the given address.</p></div><div class='function'><h3 id='AudioDelay.resize'>resize</h3><p class='code'><i>int</i> resize(<i>int</i> newsize)</p><p class='help'>Resizes the data array length.</p></div><div class='function'><h3 id='AudioDelay.copyFrom'>copyFrom</h3><p class='code'><a href='#AudioDelay'>this</a> copyFrom(<i>Data</i> source)</p><p class='help'>Makes a copy of the source data. Any old data in this object will be lost.</p></div><div class='function'><h3 id='AudioDelay.insert'>insert</h3><p class='code'><a href='#AudioDelay'>this</a> insert(<i>Data</i> source, <i>int</i> position)</p><p class='help'>Copies the source data to the given position. The data may be resized to fit the added content.</p></div><div class='function'><h3 id='AudioDelay.convert'>convert</h3><p class='code'><a href='#AudioDelay'>this</a> convert(<i>int</i> sampleRate, <i>int</i> bitsPerSample</p><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='AudioDelay.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='AudioDelay.size'><i>int</i> size</h3><p class='help'>(readonly) Size of data array.</p></div><div class='member'><h3 id='AudioDelay.loop'><i>bool</i> loop</h3><p class='help'>Set to true to wrap the read and write cursor when they reach the end of the stream.</p></div><div class='member'><h3 id='AudioDelay.readCursor'><i>int</i> readCursor</h3><p class='help'>Read cursor.</p></div><div class='member'><h3 id='AudioDelay.writeCursor'><i>int</i> writeCursor</h3><p class='help'>Write cursor.</p></div><div class='member'><h3 id='AudioDelay.multiplay'><i>int</i> multiplay</h3><p class='help'>Allow to duplicate this audiobuffer for playing multiple instances simultaneously.</p></div><div class='member'><h3 id='AudioDelay.playing'><i>int</i> playing</h3><p class='help'>Audiobuffer is currently playing.</p></div><div class='member'><h3 id='AudioDelay.volume'><i>float</i> volume</h3><p class='help'>Volume of audio playback for this buffer. Ranges from 0.0 to 1.0.</p></div><div class='member'><h3 id='AudioDelay.bytesAvailable'><i>int</i> bytesAvailable</h3><p class='help'></p></div><div class='member'><h3 id='AudioDelay.enabled'><i>int</i> enabled</h3><p class='help'></p></div><div class='member'><h3 id='AudioDelay.seconds'><a href='#int'>int</a> seconds</h3><p class='help'>Number of seconds for the history buffer.</p></div><div class='member'><h3 id='AudioDelay.source'><a href='#AudioData'>AudioData</a> source</h3><p class='help'>Source for streaming audio data to a device.</p></div><div class='member'><h3 id='AudioDelay.history'><a href='#AudioData'>AudioData</a> history</h3><p class='help'>Audio buffer for story the history of the sound.</p></div><div class='member'><h3 id='AudioDelay.outputFile'><i>string</i> outputFile</h3><p class='help'></p></div><div class='member'><h3 id='AudioDelay.delay'><i>float</i> delay</h3><p class='help'>Delay in seconds.</p></div><div class='member'><h3 id='AudioDelay.delayVolume'><i>float</i> delayVolume</h3><p class='help'>Volume of delayed audio.</p></div></div><hr/><div class='class'><h2 id='Dmx'>Dmx</h2><p class='code'>Dmx((optional) <i>string</i> id)</p><p class='help'>USB-DMX (DMX-512) device connection through DasHard DLL. Allows optional mapping of channel to X,Y coordinates (setMapping, setPixel), or direct access (setChannel). Initialization happens on object creation, no parameters are needed.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Dmx.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Dmx.open'>open</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.close'>close</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.clearTo'>clearTo</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.setOffset'>setOffset</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.setChannel'>setChannel</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.setMapping'>setMapping</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.setPixel'>setPixel</h3><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Dmx.update'>update</h3><p class='help'><i>no help found</i></p></div><p class='caption'>Members:</p><div class='member'><h3 id='Dmx.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div></div><hr/><div class='class'><h2 id='Video'>Video</h2><p class='code'>Video(<i>string</i> file, <i>int</i> pos_x, <i>int</i> pos_y, <i>int</i> width, <i>int</i> height)</p><p class='help'>Video playback node.</p><p class='caption'>Functions:</p><div class='function'><h3 id='Video.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Video.update'>update</h3><p class='code'><a href='#Video'>this</a> update()</p><p class='help'>Captures the video frame into texture.</p></div><div class='function'><h3 id='Video.render'>render</h3><p class='code'><a href='#Video'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Video.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Video.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Video'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Video.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Video.left'>left</h3><p class='code'><a href='#Video'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Video.center'>center</h3><p class='code'><a href='#Video'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Video.right'>right</h3><p class='code'><a href='#Video'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Video.top'>top</h3><p class='code'><a href='#Video'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Video.middle'>middle</h3><p class='code'><a href='#Video'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Video.bottom'>bottom</h3><p class='code'><a href='#Video'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Video.setBitmap'>setBitmap</h3><p class='code'><i>int</i> setBitmap(<i>Bitmap</i> bitmap)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Video.getBitmap'>getBitmap</h3><p class='code'><i>Bitmap</i> getBitmap()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Video.load'>load</h3><p class='code'><a href='#Video'>this</a> load(<i>string</i> file)</p><p class='help'>Loads an image file and uses it. Returns null on failure.</p></div><div class='function'><h3 id='Video.save'>save</h3><p class='code'><a href='#Video'>this</a> save(<i>string</i> file</p><p class='help'>Saves the current content to a PNG image file.</p></div><div class='function'><h3 id='Video.create'>create</h3><p class='code'><i>int</i> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Re-)creates the texture with the given dimensions. Returns non-zero on success.</p></div><div class='function'><h3 id='Video.duplicate'>duplicate</h3><p class='code'><a href='#Texture'>Texture</a> duplicate()</p><p class='help'>Creates and returns a duplicate of the texture. The returned texture object has its own texture memory.</p></div><div class='function'><h3 id='Video.clear'>clear</h3><p class='code'><a href='#Video'>this</a> clear((optional) <i>string</i> color)</p><p class='help'>Fills the texture with the given or set clear color.</p></div><div class='function'><h3 id='Video.pick'>pick</h3><p class='code'><i>string</i> pick(<i>int</i> x, <i>int</i> y)</p><p class='help'>Returns the color on the given texel position. The string has the format RRGGBBAA with hexadigital numbers. The <a href='#Color'>Color</a> can be used afterwards to translate or modify the color.</p></div><div class='function'><h3 id='Video.resize'>resize</h3><p class='code'><a href='#Video'>this</a> resize(<i>int</i> width, <i>int</i> height, (optional) <i>int</i> bilinear)</p><p class='help'>Resizes the texture to the given size. Optionally a bilinear filter applies. <b>On some hardware & platform combinates (especially embedded hardware) the actual dimension may differ due to power-of-two and size restrictions.</b></p></div><div class='function'><h3 id='Video.open'>open</h3><p class='code'><i>int</i> open(<i>string</i> file)</p><p class='help'>Opens a video for playback. The video is <b>not</b> started here.</p></div><div class='function'><h3 id='Video.start'>start</h3><p class='code'><a href='#Video'>this</a> start()</p><p class='help'>Starts the video. <b>Some video codecs may need manual timing and will not render beyond the first frame by itself.</b></p></div><div class='function'><h3 id='Video.stop'>stop</h3><p class='code'><a href='#Video'>this</a> stop()</p><p class='help'>Stops the video.</p></div><div class='function'><h3 id='Video.pause'>pause</h3><p class='code'><a href='#Video'>this</a> pause()</p><p class='help'>Pauses the video.</p></div><div class='function'><h3 id='Video.setPosition'>setPosition</h3><p class='code'><a href='#Video'>this</a> setPosition(<i>float</i> position)</p><p class='help'>Sets the frame position (in seconds) of the video.</p></div><div class='function'><h3 id='Video.getPosition'>getPosition</h3><p class='code'><i>float</i> getPosition()</p><p class='help'>Gets the frame position (in seconds) of the video.</p></div><div class='function'><h3 id='Video.getDuration'>getDuration</h3><p class='code'><i>float</i> getDuration()</p><p class='help'>Gets the total duration (in seconds) of the video.</p></div><div class='function'><h3 id='Video.setSpeed'>setSpeed</h3><p class='code'><a href='#Video'>this</a> setSpeed(<i>float</i> speed)</p><p class='help'>Sets the playback rate of the video. With 1.0 meaning normal speed and 0.5 meaning half-speed and so on.</p></div><div class='function'><h3 id='Video.update'>update</h3><p class='code'><a href='#Video'>this</a> update()</p><p class='help'>Captures the video frame into texture.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Video.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Video.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Video.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Video.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Video.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Video.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Video.center'>center</a> .</p></div><div class='member'><h3 id='Video.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Video.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Video.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Video.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Video.position'>position</a> .x</p></div><div class='member'><h3 id='Video.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Video.position'>position</a> .y</p></div><div class='member'><h3 id='Video.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Video.position'>position</a> .z</p></div><div class='member'><h3 id='Video.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Video.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Video.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Video.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Video.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Video.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Video.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Video.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Video.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='Video.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='Video.color'><a href='#Color'>Color</a> color</h3><p class='help'><b>Experimental.</b> The color used while rendering.</p></div><div class='member'><h3 id='Video.clearColor'><i>string</i> clearColor</h3><p class='help'>Color that is used to clear or create the texture.</p></div><div class='member'><h3 id='Video.opacity'><i>float</i> opacity</h3><p class='help'>Opacity of the texture while rendering.</p></div></div><hr/><div class='class'><h2 id='Camera'>Camera</h2><p class='code'>Camera(<i>sting</i> (or) <i>int</i> device, <i>int</i> pos_x, <i>int</i> pos_y, <i>int</i> width, <i>int</i> height, <i>int</i> bits</p><p class='help'>Camera node that displays the image from the given camera and/or saves it.</p><p class='caption'>Example:</p><div class='example'><pre>global WIDTH = 640; global HEIGHT = 480;
global FRAME = Frame("Camera Test", 50, 50, WIDTH, HEIGHT, "#ff00ff").toggle().showCursor(true);
FRAME.onKeyDown = function(e) {   if(e.key == 'C') { e.sender.root["camera"].config(); }   };
FRAME.root["camera"] = Camera(0, 0, 0, 640, 480, 0);
pause(3.0);  // wait for camera to be ready

while(true) {
    FRAME.root["camera"].update();
    FRAME.render();
	yield();
}
</pre></div><p class='caption'>Functions:</p><div class='function'><h3 id='Camera.toString'>toString</h3><p class='code'><i>string</i> toString()</p><p class='help'>Get string representation of object.</p></div><div class='function'><h3 id='Camera.update'>update</h3><p class='code'><a href='#Camera'>this</a> update()</p><p class='help'>Does a manual update of the camera texture, may need to be called in sync with the cameras framerate.</p></div><div class='function'><h3 id='Camera.render'>render</h3><p class='code'><a href='#Camera'>this</a> render()</p><p class='help'>Renders the node and all its childs inside the selected frame.</p></div><div class='function'><h3 id='Camera.hit'>hit</h3><p class='code'><i>int</i> hit(<i>float</i> x, <i>float</i> y)</p><p class='help'>Does a hit-test on the node, returns 1 if the coordinates hit the node on the screen.</p></div><div class='function'><h3 id='Camera.setClipRegion'>setClipRegion</h3><p class='code'><a href='#Camera'>this</a> setClipRegion(<i>float</i> left, <i>float</i> top, <i>float</i> right, <i>float</i> bottom)</p><p class='help'>Sets the scissor clip region, everything inside will clip to that region.</p></div><div class='function'><h3 id='Camera.getChild'>getChild</h3><p class='code'><a href='#Node'>Node</a> getChild(<i>int</i> index)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Camera.left'>left</h3><p class='code'><a href='#Camera'>this</a> left()</p><p class='help'>Aligns the left of the node to the pivot.</p></div><div class='function'><h3 id='Camera.center'>center</h3><p class='code'><a href='#Camera'>this</a> center()</p><p class='help'>Aligns the horizontal center of the node to the pivot.</p></div><div class='function'><h3 id='Camera.right'>right</h3><p class='code'><a href='#Camera'>this</a> right()</p><p class='help'>Aligns the right of the node to the pivot.</p></div><div class='function'><h3 id='Camera.top'>top</h3><p class='code'><a href='#Camera'>this</a> top()</p><p class='help'>Aligns the top of the node to the pivot.</p></div><div class='function'><h3 id='Camera.middle'>middle</h3><p class='code'><a href='#Camera'>this</a> middle()</p><p class='help'>Aligns the vertical center of the node to the pivot.</p></div><div class='function'><h3 id='Camera.bottom'>bottom</h3><p class='code'><a href='#Camera'>this</a> bottom()</p><p class='help'>Aligns the bottom of the node to the pivot.</p></div><div class='function'><h3 id='Camera.setBitmap'>setBitmap</h3><p class='code'><i>int</i> setBitmap(<i>Bitmap</i> bitmap)</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Camera.getBitmap'>getBitmap</h3><p class='code'><i>Bitmap</i> getBitmap()</p><p class='help'><i>no help found</i></p></div><div class='function'><h3 id='Camera.load'>load</h3><p class='code'><a href='#Camera'>this</a> load(<i>string</i> file)</p><p class='help'>Loads an image file and uses it. Returns null on failure.</p></div><div class='function'><h3 id='Camera.save'>save</h3><p class='code'><a href='#Camera'>this</a> save(<i>string</i> file</p><p class='help'>Saves the current content to a PNG image file.</p></div><div class='function'><h3 id='Camera.create'>create</h3><p class='code'><i>int</i> create(<i>int</i> width, <i>int</i> height)</p><p class='help'>(Re-)creates the texture with the given dimensions. Returns non-zero on success.</p></div><div class='function'><h3 id='Camera.duplicate'>duplicate</h3><p class='code'><a href='#Texture'>Texture</a> duplicate()</p><p class='help'>Creates and returns a duplicate of the texture. The returned texture object has its own texture memory.</p></div><div class='function'><h3 id='Camera.clear'>clear</h3><p class='code'><a href='#Camera'>this</a> clear((optional) <i>string</i> color)</p><p class='help'>Fills the texture with the given or set clear color.</p></div><div class='function'><h3 id='Camera.pick'>pick</h3><p class='code'><i>string</i> pick(<i>int</i> x, <i>int</i> y)</p><p class='help'>Returns the color on the given texel position. The string has the format RRGGBBAA with hexadigital numbers. The <a href='#Color'>Color</a> can be used afterwards to translate or modify the color.</p></div><div class='function'><h3 id='Camera.resize'>resize</h3><p class='code'><a href='#Camera'>this</a> resize(<i>int</i> width, <i>int</i> height, (optional) <i>int</i> bilinear)</p><p class='help'>Resizes the texture to the given size. Optionally a bilinear filter applies. <b>On some hardware & platform combinates (especially embedded hardware) the actual dimension may differ due to power-of-two and size restrictions.</b></p></div><div class='function'><h3 id='Camera.open'>open</h3><p class='code'><i>int</i> open(<i>sting</i> (or) <i>int</i> device, <i>int</i> width, <i>int</i> height, <i>int</i> bits)</p><p class='help'>Opens the camera with the given settings, the 'device' can either be an index, the device name or part of the beginning of the device name. Returns non-zero on success.</p></div><div class='function'><h3 id='Camera.update'>update</h3><p class='code'><a href='#Camera'>this</a> update()</p><p class='help'>Does a manual update of the camera texture, may need to be called in sync with the cameras framerate.</p></div><div class='function'><h3 id='Camera.config'>config</h3><p class='code'><a href='#Camera'>this</a> config()</p><p class='help'>Opens a DirectShow configuration dialog for the device. Some changes on that dialog should then be stored for this application (not reset on reboot). But this needs to be tested, since it is driver-dependend.</p></div><div class='function'><h3 id='Camera.setFocus'>setFocus</h3><p class='code'><a href='#Camera'>this</a> setFocus(<i>int</i> focus)</p><p class='help'>Sets the focus for the device or enables the auto-focus when the value is zero or below.</p></div><div class='function'><h3 id='Camera.setZoom'>setZoom</h3><p class='code'><a href='#Camera'>this</a> setZoom(<i>int</i> zoom)</p><p class='help'>Sets the zoom for the device. </p></div><div class='function'><h3 id='Camera.setExposure'>setExposure</h3><p class='code'><a href='#Camera'>this</a> setExposure(<i>int</i> exposure)</p><p class='help'>Sets the exposure for the device.</p></div><div class='function'><h3 id='Camera.setWhiteBalance'>setWhiteBalance</h3><p class='code'><a href='#Camera'>this</a> setWhiteBalance(<i>int</i> balance)</p><p class='help'>Set white-balance for the device.</p></div><div class='function'><h3 id='Camera.setBrightness'>setBrightness</h3><p class='code'><a href='#Camera'>this</a> setBrightness(<i>int</i> brightness)</p><p class='help'>Set brightness for the device.</p></div><div class='function'><h3 id='Camera.setContrast'>setContrast</h3><p class='code'><a href='#Camera'>this</a> setContrast(<i>int</i> contrast)</p><p class='help'>Set contrast for the device.</p></div><div class='function'><h3 id='Camera.setSaturation'>setSaturation</h3><p class='code'><a href='#Camera'>this</a> setSaturation(<i>int</i> saturation)</p><p class='help'>Set saturation for the device.</p></div><div class='function'><h3 id='Camera.setPowerlineFrequency'>setPowerlineFrequency</h3><p class='code'><a href='#Camera'>this</a> setPowerlineFrequency(<i>int</i> frequency)</p><p class='help'>Set the frequency of the powerline to match the camera.</p></div><div class='function'><h3 id='Camera.snapshot'>snapshot</h3><p class='code'><a href='#Texture'>Texture</a> snapshot()</p><p class='help'>Makes a snapshot of the current camera image and returns it as a texture.</p></div><div class='function'><h3 id='Camera.snapshotBitmap'>snapshotBitmap</h3><p class='code'><a href='#Bitmap'>Bitmap</a> snapshotBitmap((optional)<a href='#Bitmap'>Bitmap</a> dst)</p><p class='help'>Makes a snapshot of the current camera image and returns it as a bitmap.</p></div><p class='caption'>Members:</p><div class='member'><h3 id='Camera.id'><i>string</i> id</h3><p class='help'>Idenfication string of the object, initially set to class name but can be changed in script.</p></div><div class='member'><h3 id='Camera.visible'><i>int</i> visible</h3><p class='help'>Visibility of the node and its child.</p></div><div class='member'><h3 id='Camera.position'><a href='#Vector'>Vector</a> position</h3><p class='help'>Position of the node on the frame.</p></div><div class='member'><h3 id='Camera.pivot'><a href='#Vector'>Vector</a> pivot</h3><p class='help'>Relative pivot/anchor of the node for positioning, rotation, etc.</p></div><div class='member'><h3 id='Camera.dimension'><a href='#Vector'>Vector</a> dimension</h3><p class='help'>Rendering dimensions.</p></div><div class='member'><h3 id='Camera.rotation'><a href='#Vector'>Vector</a> rotation</h3><p class='help'>Rotation around the <a href='#Camera.center'>center</a> .</p></div><div class='member'><h3 id='Camera.scaling'><a href='#Vector'>Vector</a> scaling</h3><p class='help'>Scaling of the node.</p></div><div class='member'><h3 id='Camera.scale'><i>float</i> scale</h3><p class='help'>Alias to <a href='#Camera.scaling'>scaling</a> .z</p></div><div class='member'><h3 id='Camera.x'><i>float</i> x</h3><p class='help'>Alias to <a href='#Camera.position'>position</a> .x</p></div><div class='member'><h3 id='Camera.y'><i>float</i> y</h3><p class='help'>Alias to <a href='#Camera.position'>position</a> .y</p></div><div class='member'><h3 id='Camera.z'><i>float</i> z</h3><p class='help'>Alias to <a href='#Camera.position'>position</a> .z</p></div><div class='member'><h3 id='Camera.width'><i>float</i> width</h3><p class='help'>Alias to <a href='#Camera.dimension'>dimension</a> .x</p></div><div class='member'><h3 id='Camera.height'><i>float</i> height</h3><p class='help'>Alias to <a href='#Camera.dimension'>dimension</a> .y</p></div><div class='member'><h3 id='Camera.depth'><i>float</i> depth</h3><p class='help'>Alias to <a href='#Camera.dimension'>dimension</a> .z</p></div><div class='member'><h3 id='Camera.rotate'><i>float</i> rotate</h3><p class='help'>Alias to <a href='#Camera.rotation'>rotation</a> .z</p></div><div class='member'><h3 id='Camera.shader'><a href='#Shader'>Shader</a> shader</h3><p class='help'><b>Experimental.</b> A shader used for rendering this node and its childs.</p></div><div class='member'><h3 id='Camera.useShader'><i>int</i> useShader</h3><p class='help'><b>Experimental.</b> Enable/Disable shader on node level.</p></div><div class='member'><h3 id='Camera.color'><a href='#Color'>Color</a> color</h3><p class='help'><b>Experimental.</b> The color used while rendering.</p></div><div class='member'><h3 id='Camera.clearColor'><i>string</i> clearColor</h3><p class='help'>Color that is used to clear or create the texture.</p></div><div class='member'><h3 id='Camera.opacity'><i>float</i> opacity</h3><p class='help'>Opacity of the texture while rendering.</p></div></div><hr/></div></body></html>
