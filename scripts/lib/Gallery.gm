#include "lib/math.gm"

global CreateGallery = function(theme, width, height) {
	// objects
	local root = Node();
	root.gallery = theme.Rectangle(0, 0, width, height);
	root.counter = 0;
	
	//root.gallery.setClipRegion(0,0,width,height);
	root.gallery.setClipRegion(0,0,width,height);
	root.images = Array();
	
	// general settings
	root.maxWidth = width;
	root.maxHeight = height;
	
	// thumbnail settings
	root.thumbsRow = 8;
	root.thumbMargin = 10;
	root.thumbWidth = (width - root.thumbMargin - root.thumbMargin * root.thumbsRow)  / root.thumbsRow;
	root.thumbHeight = root.thumbWidth / 1.3;
	root.thumbMaxWidth = 400;
	root.thumbMaxHeight = 300;
	
	// GetUpscale
	root.GetUpscale = function() {
		local count = this.images.length();
		
		// compute total width of all thumbnails
		local totalWidth = this.thumbMargin;
		foreach(i in this.images) {
			totalWidth += (this.thumbWidth + this.thumbMargin) * i.zoom;
		}
		
		// we can probably upscale thumbnails
		local maxThumbsPerRow = (this.maxWidth - this.thumbMargin) / (this.thumbWidth + this.thumbMargin);
		local maxUpscaleA = this.maxHeight / (this.thumbHeight + this.thumbMargin * 2);
		local maxUpscaleB = this.maxWidth / totalWidth;
		local upscale = min(maxUpscaleA, maxUpscaleB);
		if(upscale < 1.0) { upscale = 1.0; }
		
		return upscale;
	};
	
	// Update
	root.Update = function(dt) {
		// animate
		foreach(i in this.images) {
			i.zoom += (1.0 - i.zoom) * 10.0 * dt;
			i.zoom = min(i.zoom, 1.0);
		}
		
		// place images
		local count = this.images.length();
		local upscale = this.GetUpscale();
		
		local x = this.thumbMargin;
		local y = this.thumbMargin;
		local h = this.thumbHeight;
		foreach(i in this.images) {
			// set image render dimensions
			i.width = this.thumbWidth * i.zoom * upscale;
			i.height = this.thumbHeight * i.zoom * upscale;
			
			// check if image fits in row, otherwise advance to the next column
			if(x + i.width + this.thumbMargin > this.maxWidth) {
				x = this.thumbMargin;
				y += h;
				h = this.thumbHeight;
			}
			
			// place thumbnail images
			i.x = x + i.width * 0.5;
			i.y = y + i.height * 0.5;
			i.center().middle();
			
			// advance x
			x += i.width + this.thumbMargin * i.zoom;
			h = max(h, i.height + this.thumbMargin);
		}
	};
	
	// AddFile
	root.AddFile = function(file) {
		local image = Texture(file).resize(this.thumbWidth, this.thumbHeight, false);
		image.zoom = 0.0;
		this.images.add(image);
		this.gallery["_"+this.counter] = image;
		this.counter += 1;
		this.Update(0.001);
	};
	
	// LoadFromPath
	root.LoadFromPath = function(path) {
		// load files from path
		local files = Array().parse(system("python scripts/dirjson.py "+path));
		if(!files.files) { files.files = Array(); }
		files = files.files;
		
		// iterate through files
		for(n=0; n<files.length(); n+=1) {
			local file = path + "/" + files.get(n).file;
			//print("Adding '"+file+"' to gallery.");
			this.AddFile(file);
		}
	};
	
	return root;
};
